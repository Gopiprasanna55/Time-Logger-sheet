{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# TimeTracker Pro\n\n## Overview\n\nTimeTracker Pro is a full-stack web application for employee timesheet management and HR approval workflows. The system provides dual interfaces - one for employees to submit timesheets and track their hours, and another for HR personnel to review, approve, and manage all employee timesheets across the organization.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React 18** with TypeScript for the client-side application\n- **Vite** as the build tool and development server with hot module replacement\n- **Wouter** for client-side routing instead of React Router\n- **TanStack Query** for server state management, caching, and API synchronization\n- **Tailwind CSS** with custom CSS variables for styling and responsive design\n- **Radix UI** components with shadcn/ui design system for consistent UI components\n- **React Hook Form** with Zod validation for form handling and input validation\n\n### Backend Architecture\n- **Express.js** server with TypeScript for RESTful API endpoints\n- **In-memory storage** using Map-based data structures for development/demo purposes\n- **Session-based authentication** with mock user switching for role demonstration\n- **Comprehensive API layer** supporting CRUD operations for users and timesheets\n- **Request logging middleware** for API monitoring and debugging\n\n### Data Storage Solutions\n- **PostgreSQL** database schema defined with Drizzle ORM\n- **Drizzle Kit** for database migrations and schema management\n- **Neon Database** serverless PostgreSQL for production deployment\n- **Memory storage adapter** for development with pre-seeded demo data\n- **Structured schema** with proper relationships between users and timesheets\n\n### Authentication and Authorization\n- **Role-based access control** with 'employee', 'hr', and 'manager' user roles\n- **Microsoft 365 Azure AD integration** for secure authentication\n- **Context-aware API endpoints** that filter data based on user permissions\n- **Session management** with proper authentication flow\n\n### UI/UX Design Patterns\n- **Component-driven architecture** with reusable UI components\n- **Responsive design** using Tailwind's mobile-first approach\n- **Consistent design system** through shadcn/ui component library\n- **Toast notifications** for user feedback on actions\n- **Loading states** and error handling throughout the application\n- **Data tables** with sorting, filtering, and batch operations\n\n### State Management\n- **Server state** managed by TanStack Query with automatic caching and invalidation\n- **Form state** handled by React Hook Form with Zod schema validation\n- **Component state** using React hooks for local UI state\n- **Query invalidation patterns** for maintaining data consistency after mutations\n\n## External Dependencies\n\n### Database Services\n- **Neon Database** - Serverless PostgreSQL hosting\n- **Drizzle ORM** - Type-safe database operations and migrations\n- **Drizzle Kit** - Database migration tooling\n\n### UI Framework and Styling\n- **Radix UI** - Unstyled, accessible UI primitives\n- **Tailwind CSS** - Utility-first CSS framework\n- **Lucide React** - Icon library for consistent iconography\n- **shadcn/ui** - Pre-built component library built on Radix UI\n\n### Development Tools\n- **Vite** - Fast build tool and development server\n- **TypeScript** - Type safety across frontend and backend\n- **ESBuild** - Fast JavaScript bundling for production builds\n- **PostCSS** - CSS processing with Autoprefixer\n\n### Form and Validation\n- **React Hook Form** - Performant form library with validation\n- **Zod** - TypeScript-first schema validation\n- **@hookform/resolvers** - Integration between React Hook Form and Zod\n\n### Utilities and Libraries\n- **date-fns** - Date manipulation and formatting\n- **clsx** and **class-variance-authority** - Conditional CSS class handling\n- **nanoid** - Unique ID generation\n- **TanStack Query** - Powerful data synchronization for React\n\n### Replit Integration\n- **Replit-specific plugins** for development environment optimization\n- **Runtime error overlay** for better debugging experience\n- **Development banner** for external access indication","size_bytes":4223},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertWorkEntrySchema, updateWorkEntryStatusSchema, insertManagerPreferencesSchema, insertUserSchema, insertWorkHourRequestSchema, updateWorkHourRequestSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { setupAuth } from \"./auth\";\nimport { getAuthUrl, handleCallback, ensureUserExists } from \"./azure-auth\";\n\n// Authentication middleware\nfunction requireAuth(req: Request, res: Response, next: NextFunction) {\n  if (!req.isAuthenticated() || !req.user) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n  next();\n}\n\n// Authorization middleware\nfunction requireRole(...allowedRoles: string[]) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    if (!req.user || !allowedRoles.includes(req.user.role)) {\n      return res.status(403).json({ message: \"Insufficient permissions\" });\n    }\n    next();\n  };\n}\n\n// Combined auth + role middleware\nfunction requireAuthAndRole(...allowedRoles: string[]) {\n  return [requireAuth, requireRole(...allowedRoles)];\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Set up authentication routes (/api/register, /api/login, /api/logout, /api/user)\n  setupAuth(app);\n\n  // Azure AD authentication routes\n  app.get(\"/api/auth/azure\", async (req: Request, res: Response) => {\n    try {\n      const authUrl = await getAuthUrl();\n      res.redirect(authUrl);\n    } catch (error) {\n      console.error(\"Azure auth error:\", error);\n      res.status(500).json({ message: \"Failed to initiate Azure authentication\" });\n    }\n  });\n\n  app.get(\"/api/auth/callback\", async (req: Request, res: Response) => {\n    try {\n      const { code } = req.query;\n      if (!code || typeof code !== \"string\") {\n        return res.status(400).json({ message: \"Authorization code missing\" });\n      }\n\n      const authResult = await handleCallback(code);\n      const azureUser = authResult.user;\n      \n      // Check if user exists in our system\n      let user = await storage.getUserByEmail(azureUser.email);\n      \n      if (!user) {\n        // Auto-create user if it's navalika@fdestech.com as manager\n        if (azureUser.email === \"navalika@fdestech.com\") {\n          user = await storage.createUser({\n            employeeId: \"MGR002\",\n            username: azureUser.firstName.toLowerCase() + \".\" + azureUser.lastName.toLowerCase(),\n            firstName: azureUser.firstName,\n            lastName: azureUser.lastName,\n            email: azureUser.email,\n            designation: \"Manager\",\n            department: \"Management\",\n            role: \"manager\",\n            password: \"azure-auth\" // Placeholder since we're using Azure auth\n          });\n        } else {\n          return res.status(403).json({ \n            message: \"User not found in system. Please contact your administrator.\" \n          });\n        }\n      }\n      \n      // Login with our system's user data (with correct user ID)\n      req.login(user, (err) => {\n        if (err) {\n          console.error(\"Login error:\", err);\n          return res.status(500).json({ message: \"Login failed\" });\n        }\n        // Redirect based on user role\n        if (user.role === \"manager\") {\n          res.redirect(\"/manager\");\n        } else if (user.role === \"hr\") {\n          res.redirect(\"/hr\");\n        } else {\n          res.redirect(\"/\");\n        }\n      });\n    } catch (error) {\n      console.error(\"Azure callback error:\", error);\n      res.status(500).json({ message: \"Authentication failed\" });\n    }\n  });\n\n  // Get all users (for HR/Manager only)\n  app.get(\"/api/users\", requireAuth, ensureUserExists, requireRole(\"hr\", \"manager\"), async (req: Request, res: Response) => {\n    try {\n      const users = await storage.getAllUsers();\n      const sanitizedUsers = users.map(user => {\n        const { password, ...publicUser } = user;\n        return publicUser;\n      });\n      res.json(sanitizedUsers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  // Create user (manager only)\n  app.post(\"/api/users\", requireAuth, ensureUserExists, requireRole(\"manager\"), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(validatedData);\n      const { password, ...publicUser } = user;\n      res.json(publicUser);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  // Update user (manager only)\n  app.put(\"/api/users/:id\", requireAuth, ensureUserExists, requireRole(\"manager\"), async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const updateData = { ...req.body };\n      \n      // Don't allow updating the ID through this endpoint\n      delete updateData.id;\n      \n      // Auto-generate username if firstName or lastName changed but username not provided\n      if ((updateData.firstName || updateData.lastName) && !updateData.username) {\n        const existingUser = await storage.getUser(id);\n        if (existingUser) {\n          const firstName = updateData.firstName || existingUser.firstName;\n          const lastName = updateData.lastName || existingUser.lastName;\n          updateData.username = `${firstName.toLowerCase()}.${lastName.toLowerCase()}`;\n        }\n      }\n      \n      // Don't update password through this endpoint (users would need a separate endpoint for that)\n      delete updateData.password;\n      \n      const updatedUser = await storage.updateUser(id, updateData);\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const { password, ...publicUser } = updatedUser;\n      res.json(publicUser);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // Delete user (manager only)\n  app.delete(\"/api/users/:id\", requireAuth, ensureUserExists, requireRole(\"manager\"), async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      \n      // Prevent managers from deleting themselves\n      if (req.user!.id === id) {\n        return res.status(400).json({ message: \"Cannot delete your own account\" });\n      }\n      \n      const deleted = await storage.deleteUser(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json({ message: \"User deleted successfully\" });\n    } catch (error: any) {\n      if (error.message === \"Cannot delete the last manager user\") {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  // Create work entry\n  app.post(\"/api/work-entries\", requireAuth, async (req, res) => {\n    try {\n      const validatedData = insertWorkEntrySchema.parse(req.body);\n      \n      // Server-side validation: only allow today's date or approved request dates\n      const today = new Date().toISOString().split('T')[0];\n      const requestedDate = validatedData.date;\n      \n      let isAllowedDate = requestedDate === today;\n      \n      // If not today, check if it's an approved work hour request date\n      if (!isAllowedDate) {\n        const approvedRequests = await storage.getWorkHourRequestsByEmployeeId(req.user!.id);\n        const approvedDates = approvedRequests\n          .filter(request => request.status === \"approved\")\n          .map(request => request.requestedDate);\n        \n        isAllowedDate = approvedDates.includes(requestedDate);\n      }\n      \n      if (!isAllowedDate) {\n        return res.status(400).json({ \n          message: \"You can only create work entries for today's date or approved work hour request dates\" \n        });\n      }\n      \n      // Check for existing work entry on the same date to prevent duplicates\n      const existingEntries = await storage.getWorkEntriesByUserIdWithFilters({\n        userId: req.user!.id,\n        startDate: requestedDate,\n        endDate: requestedDate,\n      });\n      \n      if (existingEntries.length > 0) {\n        return res.status(400).json({ \n          message: \"A work entry already exists for this date\" \n        });\n      }\n      \n      const workEntry = await storage.createWorkEntry({\n        ...validatedData,\n        userId: req.user!.id,\n      });\n\n      res.json(workEntry);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create work entry\" });\n    }\n  });\n\n  // Get user's work entries\n  app.get(\"/api/work-entries/my\", requireAuth, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      \n      const filters = {\n        userId: req.user!.id,\n        startDate: startDate as string | undefined,\n        endDate: endDate as string | undefined,\n      };\n\n      const entries = await storage.getWorkEntriesByUserIdWithFilters(filters);\n      res.json(entries);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch work entries\" });\n    }\n  });\n\n  // Get all work entries (for HR/Manager only)\n  app.get(\"/api/work-entries\", requireAuth, requireRole(\"hr\", \"manager\"), async (req: Request, res: Response) => {\n    try {\n      const { userId, department, status, startDate, endDate } = req.query;\n\n      const filters = {\n        userId: userId as string | undefined,\n        department: department as string | undefined,\n        status: status as string | undefined,\n        startDate: startDate as string | undefined,\n        endDate: endDate as string | undefined,\n      };\n\n      const entries = await storage.getWorkEntriesByFilters(filters);\n      res.json(entries);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch work entries\" });\n    }\n  });\n\n  // Update work entry status (approve/reject) - HR/Manager only\n  app.patch(\"/api/work-entries/:id/status\", requireAuth, requireRole(\"hr\", \"manager\"), async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const validatedData = updateWorkEntryStatusSchema.parse(req.body);\n\n      const entry = await storage.updateWorkEntryStatus(id, validatedData.status, req.user!.id);\n      if (!entry) {\n        return res.status(404).json({ message: \"Work entry not found\" });\n      }\n\n      res.json(entry);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update work entry status\" });\n    }\n  });\n\n  // Delete work entry - HR/Manager only\n  app.delete(\"/api/work-entries/:id\", requireAuth, requireRole(\"hr\", \"manager\"), async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteWorkEntry(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Work entry not found\" });\n      }\n\n      res.json({ message: \"Work entry deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete work entry\" });\n    }\n  });\n\n  // Get daily work report for a specific user and date\n  app.get(\"/api/users/:userId/daily-report/:date\", requireAuth, async (req, res) => {\n    try {\n      const { userId, date } = req.params;\n      \n      // Users can only access their own reports unless they're HR/Manager\n      if (userId !== req.user!.id && ![\"hr\", \"manager\"].includes(req.user!.role)) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const report = await storage.getDailyWorkReport(userId, date);\n      res.json(report);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch daily work report\" });\n    }\n  });\n\n  // Legacy timesheet endpoints for backward compatibility - secured\n  app.post(\"/api/timesheets\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertWorkEntrySchema.parse(req.body);\n      const entry = await storage.createTimesheet({\n        ...validatedData,\n        userId: req.user!.id,\n      });\n\n      res.json(entry);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create timesheet\" });\n    }\n  });\n\n  app.get(\"/api/timesheets/my\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const timesheets = await storage.getTimesheetsByUserId(req.user!.id);\n      res.json(timesheets);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch timesheets\" });\n    }\n  });\n\n  app.get(\"/api/timesheets\", requireAuth, requireRole(\"hr\", \"manager\"), async (req: Request, res: Response) => {\n    try {\n      const { userId, department, status, startDate, endDate } = req.query;\n\n      const filters = {\n        userId: userId as string | undefined,\n        department: department as string | undefined,\n        status: status as string | undefined,\n        startDate: startDate as string | undefined,\n        endDate: endDate as string | undefined,\n      };\n\n      const timesheets = await storage.getTimesheetsByFilters(filters);\n      res.json(timesheets);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch timesheets\" });\n    }\n  });\n\n  app.patch(\"/api/timesheets/:id/status\", requireAuth, requireRole(\"hr\", \"manager\"), async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const validatedData = updateWorkEntryStatusSchema.parse(req.body);\n\n      const timesheet = await storage.updateTimesheetStatus(id, validatedData.status, req.user!.id);\n      if (!timesheet) {\n        return res.status(404).json({ message: \"Timesheet not found\" });\n      }\n\n      res.json(timesheet);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update timesheet status\" });\n    }\n  });\n\n  app.delete(\"/api/timesheets/:id\", requireAuth, requireRole(\"hr\", \"manager\"), async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteTimesheet(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Timesheet not found\" });\n      }\n\n      res.json({ message: \"Timesheet deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete timesheet\" });\n    }\n  });\n\n  // Get work entry statistics\n  app.get(\"/api/stats\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      // Check user role to determine which stats to show\n      if (req.user!.role === \"hr\" || req.user!.role === \"manager\") {\n        const allEntries = await storage.getAllWorkEntries();\n        const allUsers = await storage.getAllUsers();\n        const employees = allUsers.filter(u => u.role === \"employee\");\n        \n        // Get today's date\n        const today = new Date().toISOString().split('T')[0];\n        \n        // Find employees who submitted today\n        const employeesWithTodayEntries = new Set();\n        allEntries.forEach(entry => {\n          if (entry.date === today) {\n            employeesWithTodayEntries.add(entry.userId);\n          }\n        });\n        \n        const submittedToday = employeesWithTodayEntries.size;\n        const notSubmittedToday = employees.length - submittedToday;\n        const totalHours = allEntries.reduce((sum, e) => sum + parseFloat(e.timeSpent), 0);\n        const avgHours = totalHours / allEntries.length || 0;\n\n        res.json({\n          totalEmployees: employees.length,\n          totalEntries: allEntries.length,\n          totalHours: totalHours.toFixed(1),\n          avgHours: avgHours.toFixed(1),\n          submittedToday,\n          notSubmittedToday,\n        });\n      } else {\n        // Employee stats\n        const entries = await storage.getWorkEntriesByUserId(req.user!.id);\n        const today = new Date().toISOString().split('T')[0];\n        const startOfWeek = new Date();\n        startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());\n        const startOfMonth = new Date(new Date().getFullYear(), new Date().getMonth(), 1);\n\n        const todayHours = entries.filter(e => e.date === today).reduce((sum, e) => sum + parseFloat(e.timeSpent), 0);\n        const weekHours = entries.filter(e => new Date(e.date) >= startOfWeek).reduce((sum, e) => sum + parseFloat(e.timeSpent), 0);\n        const monthHours = entries.filter(e => new Date(e.date) >= startOfMonth).reduce((sum, e) => sum + parseFloat(e.timeSpent), 0);\n\n        res.json({\n          todayHours: todayHours.toFixed(1),\n          weekHours: weekHours.toFixed(1),\n          monthHours: monthHours.toFixed(1),\n          status: \"On Track\",\n        });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch statistics\" });\n    }\n  });\n\n  // Export work entries - HR/Manager only\n  app.get(\"/api/work-entries/export\", requireAuth, requireRole(\"hr\", \"manager\"), async (req: Request, res: Response) => {\n    try {\n      const { format, ...filters } = req.query;\n      const entries = await storage.getWorkEntriesByFilters(filters as any);\n\n      if (format === \"csv\") {\n        const csvHeaders = \"Employee ID,Employee,Date,Work Type,Description,Time Spent,Status\\n\";\n        const csvRows = entries.map(e => \n          `\"${e.user.employeeId}\",\"${e.user.firstName} ${e.user.lastName}\",\"${e.date}\",\"${e.workType}\",\"${e.description}\",\"${e.timeSpent}\",\"${e.status}\"`\n        ).join('\\n');\n\n        res.setHeader('Content-Type', 'text/csv');\n        res.setHeader('Content-Disposition', 'attachment; filename=\"work-entries.csv\"');\n        res.send(csvHeaders + csvRows);\n      } else {\n        res.json(entries);\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to export work entries\" });\n    }\n  });\n\n  // Legacy export endpoint - HR/Manager only\n  app.get(\"/api/timesheets/export\", requireAuth, requireRole(\"hr\", \"manager\"), async (req: Request, res: Response) => {\n    try {\n      const { format, ...filters } = req.query;\n      const timesheets = await storage.getTimesheetsByFilters(filters as any);\n\n      if (format === \"csv\") {\n        const csvHeaders = \"Employee,Date,Work Type,Description,Time Spent,Status\\n\";\n        const csvRows = timesheets.map(t => \n          `\"${t.user.firstName} ${t.user.lastName}\",\"${t.date}\",\"${t.workType}\",\"${t.description}\",\"${t.timeSpent}\",\"${t.status}\"`\n        ).join('\\n');\n\n        res.setHeader('Content-Type', 'text/csv');\n        res.setHeader('Content-Disposition', 'attachment; filename=\"timesheets.csv\"');\n        res.send(csvHeaders + csvRows);\n      } else {\n        res.json(timesheets);\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to export timesheets\" });\n    }\n  });\n\n  // Manager dashboard statistics\n  app.get(\"/api/manager-dashboard-stats\", requireAuth, requireRole(\"manager\"), async (req: Request, res: Response) => {\n    try {\n      // Get all users and filter employees\n      const allUsers = await storage.getAllUsers();\n      const employees = allUsers.filter(user => user.role === \"employee\");\n      \n      // Get all work entries\n      const allEntries = await storage.getAllWorkEntries();\n      \n      // Calculate total employees\n      const totalEmployees = employees.length;\n      \n      // Calculate submitted vs not submitted for TODAY only\n      const today = new Date();\n      const todayStr = today.toISOString().split('T')[0];\n      \n      // Get work entries for today\n      const todayEntries = allEntries.filter(entry => entry.date === todayStr);\n      \n      // Count employees who submitted work today\n      const employeesWithEntriesToday = new Set(todayEntries.map(entry => entry.userId));\n      const submitted = employeesWithEntriesToday.size;\n      const notSubmitted = totalEmployees - submitted;\n      \n      // Calculate total work hours for today (using same todayEntries from above)\n      const totalWorkHoursToday = todayEntries.reduce((sum, entry) => sum + parseFloat(entry.timeSpent), 0);\n      \n      res.json({\n        totalEmployees,\n        submitted,\n        notSubmitted,\n        totalWorkHours: totalWorkHoursToday.toFixed(1)\n      });\n    } catch (error) {\n      console.error(\"Manager dashboard stats error:\", error);\n      res.status(500).json({ message: \"Failed to fetch manager dashboard statistics\" });\n    }\n  });\n\n  // Manager preferences endpoints\n  \n  // Get manager preferences\n  app.get(\"/api/manager-preferences\", requireAuth, requireRole(\"manager\"), async (req: Request, res: Response) => {\n    try {\n      const preferences = await storage.getManagerPreferences(req.user!.id);\n      if (preferences) {\n        const selectedEmployeeIds = JSON.parse(preferences.selectedEmployeeIds);\n        res.json({ ...preferences, selectedEmployeeIds });\n      } else {\n        res.json({ selectedEmployeeIds: [] });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch manager preferences\" });\n    }\n  });\n  \n  // Save/Update manager preferences\n  app.post(\"/api/manager-preferences\", requireAuth, requireRole(\"manager\"), async (req: Request, res: Response) => {\n    try {\n      const { selectedEmployeeIds } = req.body;\n      if (!Array.isArray(selectedEmployeeIds)) {\n        return res.status(400).json({ message: \"selectedEmployeeIds must be an array\" });\n      }\n      \n      const preferences = await storage.updateManagerPreferences(req.user!.id, selectedEmployeeIds);\n      res.json({ ...preferences, selectedEmployeeIds: JSON.parse(preferences.selectedEmployeeIds) });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to save manager preferences\" });\n    }\n  });\n\n  // Work Hour Request endpoints\n  \n  // Create work hour request (employees only)\n  app.post(\"/api/work-hour-requests\", requireAuth, requireRole(\"employee\"), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertWorkHourRequestSchema.parse(req.body);\n      \n      // Check if request for this date already exists\n      const existingRequests = await storage.getWorkHourRequestsByEmployeeId(req.user!.id);\n      const duplicateRequest = existingRequests.find(request => \n        request.requestedDate === validatedData.requestedDate && \n        request.status === \"pending\"\n      );\n      \n      if (duplicateRequest) {\n        return res.status(400).json({ message: \"A request for this date is already pending\" });\n      }\n      \n      // Check if the requested date is in the past\n      const requestedDate = new Date(validatedData.requestedDate);\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      if (requestedDate >= today) {\n        return res.status(400).json({ message: \"Can only request work hours for past dates\" });\n      }\n      \n      const request = await storage.createWorkHourRequest({\n        ...validatedData,\n        employeeId: req.user!.id,\n      });\n      \n      res.json(request);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create work hour request\" });\n    }\n  });\n  \n  // Get work hour requests for current user (employees)\n  app.get(\"/api/work-hour-requests/my\", requireAuth, requireRole(\"employee\"), async (req: Request, res: Response) => {\n    try {\n      const requests = await storage.getWorkHourRequestsByEmployeeId(req.user!.id);\n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch work hour requests\" });\n    }\n  });\n  \n  // Get all pending work hour requests (managers only)\n  app.get(\"/api/work-hour-requests\", requireAuth, requireRole(\"manager\"), async (req: Request, res: Response) => {\n    try {\n      const requests = await storage.getWorkHourRequestsByManagerId(req.user!.id);\n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch work hour requests\" });\n    }\n  });\n  \n  // Approve/reject work hour request (managers only)\n  app.put(\"/api/work-hour-requests/:id\", requireAuth, requireRole(\"manager\"), async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const validatedData = updateWorkHourRequestSchema.parse(req.body);\n      \n      const request = await storage.updateWorkHourRequest(id, {\n        status: validatedData.status,\n        managerId: req.user!.id,\n        managerComments: validatedData.managerComments,\n      });\n      \n      if (!request) {\n        return res.status(404).json({ message: \"Work hour request not found\" });\n      }\n      \n      res.json(request);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update work hour request\" });\n    }\n  });\n  \n  // Get specific work hour request (for both employees and managers)\n  app.get(\"/api/work-hour-requests/:id\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const request = await storage.getWorkHourRequestById(id);\n      \n      if (!request) {\n        return res.status(404).json({ message: \"Work hour request not found\" });\n      }\n      \n      // Check authorization - employees can only see their own requests\n      if (req.user!.role === \"employee\" && request.employeeId !== req.user!.id) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      res.json(request);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch work hour request\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":26330},"server/storage.ts":{"content":"import { type User, type InsertUser, type WorkEntry, type InsertWorkEntry, type WorkEntryWithUser, type DailyWorkReport, type ManagerPreferences, type InsertManagerPreferences, type WorkHourRequest, type InsertWorkHourRequest, type WorkHourRequestWithUser, users, workEntries, managerPreferences, workHourRequests } from \"@shared/schema\";\nimport { randomUUID, scrypt, randomBytes } from \"crypto\";\nimport { promisify } from \"util\";\nimport session from \"express-session\";\nimport createMemoryStore from \"memorystore\";\nimport { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { eq, and, gte, lte } from \"drizzle-orm\";\nimport { sql } from \"drizzle-orm\";\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nexport interface IStorage {\n  // Session store\n  sessionStore: session.Store;\n  \n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getAllUsers(): Promise<User[]>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined>;\n  deleteUser(id: string): Promise<boolean>;\n\n  // Work Entry methods\n  createWorkEntry(entry: InsertWorkEntry & { userId: string }): Promise<WorkEntry>;\n  getWorkEntriesByUserId(userId: string): Promise<WorkEntry[]>;\n  getWorkEntriesByUserIdWithFilters(filters: {\n    userId: string;\n    startDate?: string;\n    endDate?: string;\n  }): Promise<WorkEntry[]>;\n  getAllWorkEntries(): Promise<WorkEntryWithUser[]>;\n  getWorkEntryById(id: string): Promise<WorkEntry | undefined>;\n  updateWorkEntryStatus(id: string, status: string, reviewedBy: string): Promise<WorkEntry | undefined>;\n  deleteWorkEntry(id: string): Promise<boolean>;\n  getWorkEntriesByFilters(filters: {\n    userId?: string;\n    department?: string;\n    status?: string;\n    startDate?: string;\n    endDate?: string;\n  }): Promise<WorkEntryWithUser[]>;\n  getDailyWorkReport(userId: string, date: string): Promise<DailyWorkReport>;\n  \n  // Manager preferences methods\n  getManagerPreferences(managerId: string): Promise<ManagerPreferences | undefined>;\n  saveManagerPreferences(preferences: InsertManagerPreferences): Promise<ManagerPreferences>;\n  updateManagerPreferences(managerId: string, selectedEmployeeIds: string[]): Promise<ManagerPreferences>;\n  \n  // Work hour request methods\n  createWorkHourRequest(request: InsertWorkHourRequest & { employeeId: string }): Promise<WorkHourRequest>;\n  getWorkHourRequestsByEmployeeId(employeeId: string): Promise<WorkHourRequestWithUser[]>;\n  getWorkHourRequestsByManagerId(managerId: string): Promise<WorkHourRequestWithUser[]>;\n  getAllWorkHourRequests(): Promise<WorkHourRequestWithUser[]>;\n  getWorkHourRequestById(id: string): Promise<WorkHourRequestWithUser | undefined>;\n  updateWorkHourRequest(id: string, updates: { status: string; managerId?: string; managerComments?: string }): Promise<WorkHourRequest | undefined>;\n  deleteWorkHourRequest(id: string): Promise<boolean>;\n  \n  // Legacy timesheet methods for backward compatibility\n  createTimesheet(timesheet: InsertWorkEntry & { userId: string }): Promise<WorkEntry>;\n  getTimesheetsByUserId(userId: string): Promise<WorkEntry[]>;\n  getAllTimesheets(): Promise<WorkEntryWithUser[]>;\n  getTimesheetById(id: string): Promise<WorkEntry | undefined>;\n  updateTimesheetStatus(id: string, status: string, reviewedBy: string): Promise<WorkEntry | undefined>;\n  deleteTimesheet(id: string): Promise<boolean>;\n  getTimesheetsByFilters(filters: {\n    userId?: string;\n    department?: string;\n    status?: string;\n    startDate?: string;\n    endDate?: string;\n  }): Promise<WorkEntryWithUser[]>;\n  \n}\n\nconst MemoryStore = createMemoryStore(session);\n\n// Database connection\nconst client = neon(process.env.DATABASE_URL!);\nconst db = drizzle(client);\n\nexport class DbStorage implements IStorage {\n  public sessionStore: session.Store;\n\n  constructor() {\n    this.sessionStore = new MemoryStore({\n      checkPeriod: 86400000, // prune expired entries every 24h\n    });\n    this.seedData().catch(console.error);\n  }\n\n  private async seedData() {\n    // Create essential manager account if it doesn't exist\n    const existingUser = await this.getUserByEmail(\"navalika@fdestech.com\");\n    if (!existingUser) {\n      const accounts = [\n        { \n          employeeId: \"MGR002\", \n          username: \"navalika.fd\", \n          password: \"azure-auth\", \n          firstName: \"Navalika\", \n          lastName: \"FD\", \n          email: \"navalika@fdestech.com\", \n          designation: \"Operations Manager\", \n          role: \"manager\", \n          department: \"Management\" \n        }\n      ];\n\n      for (const account of accounts) {\n        const hashedPassword = await hashPassword(account.password);\n        await db.insert(users).values({\n          ...account,\n          password: hashedPassword,\n        });\n      }\n    }\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    // Auto-generate username if not provided\n    const username = insertUser.username || \n      `${insertUser.firstName.toLowerCase()}.${insertUser.lastName.toLowerCase()}`;\n    \n    // Use provided password or default\n    const password = insertUser.password || \"defaultPassword123\";\n    const hashedPassword = await hashPassword(password);\n    \n    const userData = { \n      ...insertUser, \n      username,\n      password: hashedPassword,\n      role: insertUser.role || \"employee\"\n    };\n\n    const result = await db.insert(users).values(userData).returning();\n    return result[0];\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async updateUser(id: string, updateData: Partial<InsertUser>): Promise<User | undefined> {\n    const result = await db.update(users).set(updateData).where(eq(users.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    const user = await this.getUser(id);\n    if (!user) return false;\n\n    // Don't allow deletion of the last manager user\n    const allUsers = await this.getAllUsers();\n    const remainingUsers = allUsers.filter(u => u.id !== id);\n    const hasManagersLeft = remainingUsers.some(u => u.role === \"manager\");\n    \n    if (user.role === \"manager\" && !hasManagersLeft) {\n      throw new Error(\"Cannot delete the last manager user\");\n    }\n\n    const result = await db.delete(users).where(eq(users.id, id));\n    return true;\n  }\n\n  async createWorkEntry(data: InsertWorkEntry & { userId: string }): Promise<WorkEntry> {\n    const workEntryData = {\n      ...data,\n      status: \"pending\" as const,\n      reviewedBy: null,\n      reviewedAt: null,\n    };\n    const result = await db.insert(workEntries).values(workEntryData).returning();\n    return result[0];\n  }\n\n  async getWorkEntriesByUserId(userId: string): Promise<WorkEntry[]> {\n    return await db.select().from(workEntries)\n      .where(eq(workEntries.userId, userId))\n      .orderBy(sql`${workEntries.date} DESC`);\n  }\n\n  async getWorkEntriesByUserIdWithFilters(filters: {\n    userId: string;\n    startDate?: string;\n    endDate?: string;\n  }): Promise<WorkEntry[]> {\n    const conditions = [eq(workEntries.userId, filters.userId)];\n\n    if (filters.startDate) {\n      conditions.push(gte(workEntries.date, filters.startDate));\n    }\n    if (filters.endDate) {\n      conditions.push(lte(workEntries.date, filters.endDate));\n    }\n\n    return await db.select().from(workEntries)\n      .where(and(...conditions))\n      .orderBy(sql`${workEntries.date} DESC`);\n  }\n\n  async getAllWorkEntries(): Promise<WorkEntryWithUser[]> {\n    const result = await db.select({\n      id: workEntries.id,\n      userId: workEntries.userId,\n      date: workEntries.date,\n      workType: workEntries.workType,\n      description: workEntries.description,\n      timeSpent: workEntries.timeSpent,\n      status: workEntries.status,\n      reviewedBy: workEntries.reviewedBy,\n      reviewedAt: workEntries.reviewedAt,\n      createdAt: workEntries.createdAt,\n      user: {\n        id: users.id,\n        employeeId: users.employeeId,\n        username: users.username,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        email: users.email,\n        designation: users.designation,\n        role: users.role,\n        department: users.department,\n      }\n    })\n    .from(workEntries)\n    .leftJoin(users, eq(workEntries.userId, users.id))\n    .orderBy(sql`${workEntries.date} DESC`);\n\n    return result.filter(entry => entry.user) as WorkEntryWithUser[];\n  }\n\n  async getWorkEntryById(id: string): Promise<WorkEntry | undefined> {\n    const result = await db.select().from(workEntries).where(eq(workEntries.id, id)).limit(1);\n    return result[0];\n  }\n\n  async updateWorkEntryStatus(id: string, status: string, reviewedBy: string): Promise<WorkEntry | undefined> {\n    const result = await db.update(workEntries)\n      .set({ \n        status, \n        reviewedBy, \n        reviewedAt: new Date() \n      })\n      .where(eq(workEntries.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteWorkEntry(id: string): Promise<boolean> {\n    await db.delete(workEntries).where(eq(workEntries.id, id));\n    return true;\n  }\n\n  async getWorkEntriesByFilters(filters: {\n    userId?: string;\n    department?: string;\n    status?: string;\n    startDate?: string;\n    endDate?: string;\n  }): Promise<WorkEntryWithUser[]> {\n    let query = db.select({\n      id: workEntries.id,\n      userId: workEntries.userId,\n      date: workEntries.date,\n      workType: workEntries.workType,\n      description: workEntries.description,\n      timeSpent: workEntries.timeSpent,\n      status: workEntries.status,\n      reviewedBy: workEntries.reviewedBy,\n      reviewedAt: workEntries.reviewedAt,\n      createdAt: workEntries.createdAt,\n      user: {\n        id: users.id,\n        employeeId: users.employeeId,\n        username: users.username,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        email: users.email,\n        designation: users.designation,\n        role: users.role,\n        department: users.department,\n      }\n    })\n    .from(workEntries)\n    .leftJoin(users, eq(workEntries.userId, users.id));\n\n    // Build where conditions\n    const conditions = [];\n    \n    if (filters.userId) {\n      conditions.push(eq(workEntries.userId, filters.userId));\n    }\n    if (filters.department) {\n      conditions.push(eq(users.department, filters.department));\n    }\n    if (filters.status) {\n      conditions.push(eq(workEntries.status, filters.status));\n    }\n    if (filters.startDate) {\n      conditions.push(gte(workEntries.date, filters.startDate));\n    }\n    if (filters.endDate) {\n      conditions.push(lte(workEntries.date, filters.endDate));\n    }\n\n    if (conditions.length > 0) {\n      const result = await query.where(and(...conditions)).orderBy(sql`${workEntries.date} DESC`);\n      return result.filter(entry => entry.user) as WorkEntryWithUser[];\n    }\n\n    const result = await query.orderBy(sql`${workEntries.date} DESC`);\n    return result.filter(entry => entry.user) as WorkEntryWithUser[];\n  }\n\n  async getDailyWorkReport(userId: string, date: string): Promise<DailyWorkReport> {\n    const entries = await db.select().from(workEntries)\n      .where(and(eq(workEntries.userId, userId), eq(workEntries.date, date)));\n    \n    const totalHours = entries.reduce((sum, entry) => sum + parseFloat(entry.timeSpent), 0);\n    \n    return {\n      date,\n      entries,\n      totalHours,\n    };\n  }\n\n  // Manager preferences methods\n  async getManagerPreferences(managerId: string): Promise<ManagerPreferences | undefined> {\n    const result = await db.select().from(managerPreferences)\n      .where(eq(managerPreferences.managerId, managerId))\n      .limit(1);\n    return result[0];\n  }\n\n  async saveManagerPreferences(preferences: InsertManagerPreferences): Promise<ManagerPreferences> {\n    const result = await db.insert(managerPreferences).values(preferences).returning();\n    return result[0];\n  }\n\n  async updateManagerPreferences(managerId: string, selectedEmployeeIds: string[]): Promise<ManagerPreferences> {\n    const existing = await this.getManagerPreferences(managerId);\n    \n    if (existing) {\n      const result = await db.update(managerPreferences)\n        .set({ \n          selectedEmployeeIds: JSON.stringify(selectedEmployeeIds),\n          updatedAt: new Date()\n        })\n        .where(eq(managerPreferences.id, existing.id))\n        .returning();\n      return result[0];\n    } else {\n      return this.saveManagerPreferences({\n        managerId,\n        selectedEmployeeIds: JSON.stringify(selectedEmployeeIds),\n      });\n    }\n  }\n\n  // Work hour request methods\n  async createWorkHourRequest(request: InsertWorkHourRequest & { employeeId: string }): Promise<WorkHourRequest> {\n    const result = await db.insert(workHourRequests).values(request).returning();\n    return result[0];\n  }\n\n  async getWorkHourRequestsByEmployeeId(employeeId: string): Promise<WorkHourRequestWithUser[]> {\n    const result = await db.select({\n      id: workHourRequests.id,\n      employeeId: workHourRequests.employeeId,\n      requestedDate: workHourRequests.requestedDate,\n      reason: workHourRequests.reason,\n      status: workHourRequests.status,\n      managerId: workHourRequests.managerId,\n      managerComments: workHourRequests.managerComments,\n      requestedAt: workHourRequests.requestedAt,\n      reviewedAt: workHourRequests.reviewedAt,\n      employee: {\n        id: users.id,\n        employeeId: users.employeeId,\n        username: users.username,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        email: users.email,\n        designation: users.designation,\n        role: users.role,\n        department: users.department,\n      },\n    })\n    .from(workHourRequests)\n    .leftJoin(users, eq(workHourRequests.employeeId, users.id))\n    .where(eq(workHourRequests.employeeId, employeeId))\n    .orderBy(sql`${workHourRequests.requestedAt} DESC`);\n\n    return result.filter(req => req.employee) as WorkHourRequestWithUser[];\n  }\n\n  async getWorkHourRequestsByManagerId(managerId: string): Promise<WorkHourRequestWithUser[]> {\n    const result = await db.select({\n      id: workHourRequests.id,\n      employeeId: workHourRequests.employeeId,\n      requestedDate: workHourRequests.requestedDate,\n      reason: workHourRequests.reason,\n      status: workHourRequests.status,\n      managerId: workHourRequests.managerId,\n      managerComments: workHourRequests.managerComments,\n      requestedAt: workHourRequests.requestedAt,\n      reviewedAt: workHourRequests.reviewedAt,\n      employee: {\n        id: users.id,\n        employeeId: users.employeeId,\n        username: users.username,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        email: users.email,\n        designation: users.designation,\n        role: users.role,\n        department: users.department,\n      },\n    })\n    .from(workHourRequests)\n    .leftJoin(users, eq(workHourRequests.employeeId, users.id))\n    .where(eq(workHourRequests.status, \"pending\"))\n    .orderBy(sql`${workHourRequests.requestedAt} DESC`);\n\n    return result.filter(req => req.employee) as WorkHourRequestWithUser[];\n  }\n\n  async getAllWorkHourRequests(): Promise<WorkHourRequestWithUser[]> {\n    const result = await db.select({\n      id: workHourRequests.id,\n      employeeId: workHourRequests.employeeId,\n      requestedDate: workHourRequests.requestedDate,\n      reason: workHourRequests.reason,\n      status: workHourRequests.status,\n      managerId: workHourRequests.managerId,\n      managerComments: workHourRequests.managerComments,\n      requestedAt: workHourRequests.requestedAt,\n      reviewedAt: workHourRequests.reviewedAt,\n      employee: {\n        id: users.id,\n        employeeId: users.employeeId,\n        username: users.username,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        email: users.email,\n        designation: users.designation,\n        role: users.role,\n        department: users.department,\n      },\n    })\n    .from(workHourRequests)\n    .leftJoin(users, eq(workHourRequests.employeeId, users.id))\n    .orderBy(sql`${workHourRequests.requestedAt} DESC`);\n\n    return result.filter(req => req.employee) as WorkHourRequestWithUser[];\n  }\n\n  async getWorkHourRequestById(id: string): Promise<WorkHourRequestWithUser | undefined> {\n    const result = await db.select({\n      id: workHourRequests.id,\n      employeeId: workHourRequests.employeeId,\n      requestedDate: workHourRequests.requestedDate,\n      reason: workHourRequests.reason,\n      status: workHourRequests.status,\n      managerId: workHourRequests.managerId,\n      managerComments: workHourRequests.managerComments,\n      requestedAt: workHourRequests.requestedAt,\n      reviewedAt: workHourRequests.reviewedAt,\n      employee: {\n        id: users.id,\n        employeeId: users.employeeId,\n        username: users.username,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        email: users.email,\n        designation: users.designation,\n        role: users.role,\n        department: users.department,\n      },\n    })\n    .from(workHourRequests)\n    .leftJoin(users, eq(workHourRequests.employeeId, users.id))\n    .where(eq(workHourRequests.id, id))\n    .limit(1);\n\n    const req = result[0];\n    return req?.employee ? req as WorkHourRequestWithUser : undefined;\n  }\n\n  async updateWorkHourRequest(id: string, updates: { status: string; managerId?: string; managerComments?: string }): Promise<WorkHourRequest | undefined> {\n    const updateData: any = {\n      status: updates.status,\n      reviewedAt: new Date(),\n    };\n    \n    if (updates.managerId) {\n      updateData.managerId = updates.managerId;\n    }\n    \n    if (updates.managerComments) {\n      updateData.managerComments = updates.managerComments;\n    }\n\n    const result = await db.update(workHourRequests)\n      .set(updateData)\n      .where(eq(workHourRequests.id, id))\n      .returning();\n    \n    return result[0];\n  }\n\n  async deleteWorkHourRequest(id: string): Promise<boolean> {\n    const result = await db.delete(workHourRequests).where(eq(workHourRequests.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Legacy methods for backward compatibility\n  async createTimesheet(timesheet: InsertWorkEntry & { userId: string }): Promise<WorkEntry> {\n    return this.createWorkEntry(timesheet);\n  }\n\n  async getTimesheetsByUserId(userId: string): Promise<WorkEntry[]> {\n    return this.getWorkEntriesByUserId(userId);\n  }\n\n  async getAllTimesheets(): Promise<WorkEntryWithUser[]> {\n    return this.getAllWorkEntries();\n  }\n\n  async getTimesheetById(id: string): Promise<WorkEntry | undefined> {\n    return this.getWorkEntryById(id);\n  }\n\n  async updateTimesheetStatus(id: string, status: string, reviewedBy: string): Promise<WorkEntry | undefined> {\n    return this.updateWorkEntryStatus(id, status, reviewedBy);\n  }\n\n  async deleteTimesheet(id: string): Promise<boolean> {\n    return this.deleteWorkEntry(id);\n  }\n\n  async getTimesheetsByFilters(filters: {\n    userId?: string;\n    department?: string;\n    status?: string;\n    startDate?: string;\n    endDate?: string;\n  }): Promise<WorkEntryWithUser[]> {\n    return this.getWorkEntriesByFilters(filters);\n  }\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private workEntries: Map<string, WorkEntry>;\n  private managerPreferences: Map<string, ManagerPreferences>;\n  public sessionStore: session.Store;\n\n  constructor() {\n    this.users = new Map();\n    this.workEntries = new Map();\n    this.managerPreferences = new Map();\n    this.sessionStore = new MemoryStore({\n      checkPeriod: 86400000, // prune expired entries every 24h\n    });\n    this.seedData().catch(console.error);\n  }\n\n  private async seedData() {\n    // Create essential manager account\n    const accounts = [\n      // Real manager account  \n      { employeeId: \"MGR002\", username: \"navalika.fd\", password: \"azure-auth\", firstName: \"Navalika\", lastName: \"FD\", email: \"navalika@fdestech.com\", designation: \"Operations Manager\", role: \"manager\", department: \"Management\" }\n    ];\n\n    // Hash passwords and create accounts\n    for (const account of accounts) {\n      const id = randomUUID();\n      const hashedPassword = await hashPassword(account.password);\n      const user: User = { ...account, id, password: hashedPassword };\n      this.users.set(id, user);\n    }\n\n    // No sample work entries - start with clean data\n  }\n\n  private getTodayDate(): string {\n    return new Date().toISOString().split('T')[0];\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    \n    // Auto-generate username if not provided\n    const username = insertUser.username || \n      `${insertUser.firstName.toLowerCase()}.${insertUser.lastName.toLowerCase()}`;\n    \n    // Use provided password or default\n    const password = insertUser.password || \"defaultPassword123\";\n    const hashedPassword = await hashPassword(password);\n    \n    const user: User = { \n      ...insertUser, \n      id,\n      username,\n      password: hashedPassword,\n      role: insertUser.role || \"employee\"\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  async updateUser(id: string, updateData: Partial<InsertUser>): Promise<User | undefined> {\n    const existingUser = this.users.get(id);\n    if (!existingUser) {\n      return undefined;\n    }\n\n    // Create updated user with new data\n    const updatedUser: User = {\n      ...existingUser,\n      ...updateData,\n      id, // Ensure ID remains unchanged\n    };\n\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    const user = this.users.get(id);\n    if (!user) {\n      return false;\n    }\n\n    // Don't allow deletion of the last admin/manager user\n    const remainingUsers = Array.from(this.users.values()).filter(u => u.id !== id);\n    const hasManagersLeft = remainingUsers.some(u => u.role === \"manager\");\n    \n    if (user.role === \"manager\" && !hasManagersLeft) {\n      throw new Error(\"Cannot delete the last manager user\");\n    }\n\n    this.users.delete(id);\n    return true;\n  }\n\n  async createWorkEntry(data: InsertWorkEntry & { userId: string }): Promise<WorkEntry> {\n    const id = randomUUID();\n    const workEntry: WorkEntry = {\n      ...data,\n      id,\n      status: \"pending\",\n      reviewedBy: null,\n      reviewedAt: null,\n      createdAt: new Date(),\n    };\n    this.workEntries.set(id, workEntry);\n    return workEntry;\n  }\n\n  async getWorkEntriesByUserId(userId: string): Promise<WorkEntry[]> {\n    return Array.from(this.workEntries.values())\n      .filter(entry => entry.userId === userId)\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  }\n\n  async getWorkEntriesByUserIdWithFilters(filters: {\n    userId: string;\n    startDate?: string;\n    endDate?: string;\n  }): Promise<WorkEntry[]> {\n    let entries = Array.from(this.workEntries.values())\n      .filter(entry => entry.userId === filters.userId);\n\n    // Apply date filters\n    if (filters.startDate) {\n      entries = entries.filter(entry => entry.date >= filters.startDate!);\n    }\n    \n    if (filters.endDate) {\n      entries = entries.filter(entry => entry.date <= filters.endDate!);\n    }\n\n    return entries.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  }\n\n  async getAllWorkEntries(): Promise<WorkEntryWithUser[]> {\n    const entries = Array.from(this.workEntries.values());\n    const result: WorkEntryWithUser[] = [];\n    \n    for (const entry of entries) {\n      const user = await this.getUser(entry.userId);\n      if (user) {\n        result.push({ ...entry, user });\n      }\n    }\n    \n    return result.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  }\n\n  async getWorkEntryById(id: string): Promise<WorkEntry | undefined> {\n    return this.workEntries.get(id);\n  }\n\n  async updateWorkEntryStatus(id: string, status: string, reviewedBy: string): Promise<WorkEntry | undefined> {\n    const entry = this.workEntries.get(id);\n    if (entry) {\n      const updatedEntry: WorkEntry = {\n        ...entry,\n        status,\n        reviewedBy,\n        reviewedAt: new Date(),\n      };\n      this.workEntries.set(id, updatedEntry);\n      return updatedEntry;\n    }\n    return undefined;\n  }\n\n  async deleteWorkEntry(id: string): Promise<boolean> {\n    return this.workEntries.delete(id);\n  }\n\n  async getWorkEntriesByFilters(filters: {\n    userId?: string;\n    department?: string;\n    status?: string;\n    startDate?: string;\n    endDate?: string;\n  }): Promise<WorkEntryWithUser[]> {\n    let entries = await this.getAllWorkEntries();\n\n    if (filters.userId) {\n      entries = entries.filter(e => e.userId === filters.userId);\n    }\n\n    if (filters.department) {\n      entries = entries.filter(e => e.user.department === filters.department);\n    }\n\n    if (filters.status) {\n      entries = entries.filter(e => e.status === filters.status);\n    }\n\n    if (filters.startDate) {\n      entries = entries.filter(e => e.date >= filters.startDate!);\n    }\n\n    if (filters.endDate) {\n      entries = entries.filter(e => e.date <= filters.endDate!);\n    }\n\n    return entries;\n  }\n\n  async getDailyWorkReport(userId: string, date: string): Promise<DailyWorkReport> {\n    const entries = Array.from(this.workEntries.values())\n      .filter(entry => entry.userId === userId && entry.date === date);\n    \n    const totalHours = entries.reduce((sum, entry) => sum + parseFloat(entry.timeSpent), 0);\n    \n    return {\n      date,\n      entries,\n      totalHours,\n    };\n  }\n\n  // Manager preferences methods\n  async getManagerPreferences(managerId: string): Promise<ManagerPreferences | undefined> {\n    return Array.from(this.managerPreferences.values())\n      .find(pref => pref.managerId === managerId);\n  }\n\n  async saveManagerPreferences(preferences: InsertManagerPreferences): Promise<ManagerPreferences> {\n    const id = randomUUID();\n    const now = new Date();\n    const newPreferences: ManagerPreferences = {\n      id,\n      ...preferences,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.managerPreferences.set(id, newPreferences);\n    return newPreferences;\n  }\n\n  async updateManagerPreferences(managerId: string, selectedEmployeeIds: string[]): Promise<ManagerPreferences> {\n    const existing = await this.getManagerPreferences(managerId);\n    const now = new Date();\n    \n    if (existing) {\n      const updated: ManagerPreferences = {\n        ...existing,\n        selectedEmployeeIds: JSON.stringify(selectedEmployeeIds),\n        updatedAt: now,\n      };\n      this.managerPreferences.set(existing.id, updated);\n      return updated;\n    } else {\n      return this.saveManagerPreferences({\n        managerId,\n        selectedEmployeeIds: JSON.stringify(selectedEmployeeIds),\n      });\n    }\n  }\n\n  // Work hour request methods (stub implementations for MemStorage)\n  async createWorkHourRequest(request: InsertWorkHourRequest & { employeeId: string }): Promise<WorkHourRequest> {\n    throw new Error(\"Work hour requests not supported in MemStorage - use DbStorage\");\n  }\n\n  async getWorkHourRequestsByEmployeeId(employeeId: string): Promise<WorkHourRequestWithUser[]> {\n    return [];\n  }\n\n  async getWorkHourRequestsByManagerId(managerId: string): Promise<WorkHourRequestWithUser[]> {\n    return [];\n  }\n\n  async getAllWorkHourRequests(): Promise<WorkHourRequestWithUser[]> {\n    return [];\n  }\n\n  async getWorkHourRequestById(id: string): Promise<WorkHourRequestWithUser | undefined> {\n    return undefined;\n  }\n\n  async updateWorkHourRequest(id: string, updates: { status: string; managerId?: string; managerComments?: string }): Promise<WorkHourRequest | undefined> {\n    return undefined;\n  }\n\n  async deleteWorkHourRequest(id: string): Promise<boolean> {\n    return false;\n  }\n\n  // Legacy methods for backward compatibility\n  async createTimesheet(timesheet: InsertWorkEntry & { userId: string }): Promise<WorkEntry> {\n    return this.createWorkEntry(timesheet);\n  }\n\n  async getTimesheetsByUserId(userId: string): Promise<WorkEntry[]> {\n    return this.getWorkEntriesByUserId(userId);\n  }\n\n  async getAllTimesheets(): Promise<WorkEntryWithUser[]> {\n    return this.getAllWorkEntries();\n  }\n\n  async getTimesheetById(id: string): Promise<WorkEntry | undefined> {\n    return this.getWorkEntryById(id);\n  }\n\n  async updateTimesheetStatus(id: string, status: string, reviewedBy: string): Promise<WorkEntry | undefined> {\n    return this.updateWorkEntryStatus(id, status, reviewedBy);\n  }\n\n  async deleteTimesheet(id: string): Promise<boolean> {\n    return this.deleteWorkEntry(id);\n  }\n\n  async getTimesheetsByFilters(filters: {\n    userId?: string;\n    department?: string;\n    status?: string;\n    startDate?: string;\n    endDate?: string;\n  }): Promise<WorkEntryWithUser[]> {\n    return this.getWorkEntriesByFilters(filters);\n  }\n\n}\n\nexport const storage = new DbStorage();","size_bytes":30257},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, decimal } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeeId: text(\"employee_id\").notNull().unique(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  designation: text(\"designation\").notNull(),\n  role: text(\"role\").notNull().default(\"employee\"), // employee, hr, or manager\n  department: text(\"department\").notNull(),\n});\n\nexport const workEntries = pgTable(\"work_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  date: text(\"date\").notNull(), // YYYY-MM-DD format\n  workType: text(\"work_type\").notNull(), // Task, Project, Meeting, Skill-up, Partial Leave\n  description: text(\"description\").notNull(),\n  timeSpent: text(\"time_spent\").notNull(), // hours in decimal format\n  status: text(\"status\").notNull().default(\"pending\"), // pending, approved, rejected\n  reviewedBy: varchar(\"reviewed_by\"),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const managerPreferences = pgTable(\"manager_preferences\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  managerId: varchar(\"manager_id\").notNull(),\n  selectedEmployeeIds: text(\"selected_employee_ids\").notNull(), // JSON array of employee IDs\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const workHourRequests = pgTable(\"work_hour_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeeId: varchar(\"employee_id\").notNull(),\n  requestedDate: text(\"requested_date\").notNull(), // YYYY-MM-DD format\n  reason: text(\"reason\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, approved, rejected\n  managerId: varchar(\"manager_id\"),\n  managerComments: text(\"manager_comments\"),\n  requestedAt: timestamp(\"requested_at\").notNull().default(sql`now()`),\n  reviewedAt: timestamp(\"reviewed_at\"),\n});\n\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n}).partial({\n  username: true,\n  password: true,\n});\n\nexport const insertWorkEntrySchema = createInsertSchema(workEntries).omit({\n  id: true,\n  userId: true,\n  reviewedBy: true,\n  reviewedAt: true,\n  createdAt: true,\n});\n\nexport const insertManagerPreferencesSchema = createInsertSchema(managerPreferences).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertWorkHourRequestSchema = createInsertSchema(workHourRequests).omit({\n  id: true,\n  employeeId: true,\n  managerId: true,\n  managerComments: true,\n  requestedAt: true,\n  reviewedAt: true,\n});\n\nexport const updateWorkHourRequestSchema = z.object({\n  status: z.enum([\"approved\", \"rejected\"]),\n  managerComments: z.string().optional(),\n});\n\n\nexport const updateWorkEntryStatusSchema = z.object({\n  status: z.enum([\"approved\", \"rejected\"]),\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type PublicUser = Omit<User, \"password\">;\nexport type InsertWorkEntry = z.infer<typeof insertWorkEntrySchema>;\nexport type WorkEntry = typeof workEntries.$inferSelect;\nexport type UpdateWorkEntryStatus = z.infer<typeof updateWorkEntryStatusSchema>;\nexport type InsertManagerPreferences = z.infer<typeof insertManagerPreferencesSchema>;\nexport type ManagerPreferences = typeof managerPreferences.$inferSelect;\nexport type InsertWorkHourRequest = z.infer<typeof insertWorkHourRequestSchema>;\nexport type WorkHourRequest = typeof workHourRequests.$inferSelect;\nexport type UpdateWorkHourRequest = z.infer<typeof updateWorkHourRequestSchema>;\n\nexport interface WorkEntryWithUser extends WorkEntry {\n  user: PublicUser;\n}\n\nexport interface WorkHourRequestWithUser extends WorkHourRequest {\n  employee: PublicUser;\n  manager?: PublicUser;\n}\n\nexport interface DailyWorkReport {\n  date: string;\n  entries: WorkEntry[];\n  totalHours: number;\n}\n\n// Legacy types for backward compatibility\nexport const timesheets = workEntries;\nexport type Timesheet = WorkEntry;\nexport type TimesheetWithUser = WorkEntryWithUser;\nexport type InsertTimesheet = InsertWorkEntry;\nexport const insertTimesheetSchema = insertWorkEntrySchema;\nexport const updateTimesheetStatusSchema = updateWorkEntryStatusSchema;\n","size_bytes":4694},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"@/lib/protected-route\";\nimport NotFound from \"@/pages/not-found\";\nimport EmployeeDashboard from \"@/pages/employee-dashboard\";\nimport HRDashboard from \"@/pages/hr-dashboard\";\nimport ManagerDashboard from \"@/pages/manager-dashboard\";\nimport AuthPage from \"@/pages/auth-page\";\nimport Navigation from \"@/components/navigation\";\n\nfunction Router() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Switch>\n        <Route path=\"/auth\" component={AuthPage} />\n        <ProtectedRoute path=\"/\" component={() => (\n          <>\n            <Navigation />\n            <EmployeeDashboard />\n          </>\n        )} />\n        <ProtectedRoute path=\"/employee\" component={() => (\n          <>\n            <Navigation />\n            <EmployeeDashboard />\n          </>\n        )} />\n        <ProtectedRoute path=\"/hr\" component={() => (\n          <>\n            <Navigation />\n            <HRDashboard />\n          </>\n        )} />\n        <ProtectedRoute path=\"/manager\" component={() => (\n          <>\n            <Navigation />\n            <ManagerDashboard />\n          </>\n        )} />\n        <Route component={NotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <Toaster />\n          <Router />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1782},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(221.2, 83.2%, 53.3%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(221.2, 83.2%, 53.3%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(221.2, 83.2%, 53.3%);\n  --font-sans: 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 2px 4px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 4px 6px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 8px 10px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217.2, 91.2%, 59.8%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(224.3, 76.3%, 94.1%);\n  --sidebar: hsl(222.2, 84%, 4.9%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(217.2, 91.2%, 59.8%);\n  --sidebar-primary-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-accent: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-ring: hsl(224.3, 76.3%, 94.1%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":3601},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Clock, User, ChevronDown, LogOut } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport default function Navigation() {\n  const [location] = useLocation();\n  const [showUserMenu, setShowUserMenu] = useState(false);\n  const { user, logoutMutation } = useAuth();\n\n  const isHRView = location === \"/hr\";\n  const isEmployeeView = location === \"/\" || location === \"/employee\";\n\n  // Only show HR link if user has hr or manager role\n  const canViewHR = user?.role === \"hr\" || user?.role === \"manager\";\n  \n  // Only show My Timesheet for employees and HR (not managers)\n  const canViewTimesheet = user?.role === \"employee\" || user?.role === \"hr\";\n\n  const handleLogout = async () => {\n    setShowUserMenu(false);\n    await logoutMutation.mutateAsync();\n  };\n\n  return (\n    <nav className=\"bg-card border-b border-border shadow-sm\" data-testid=\"navigation\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Clock className=\"text-primary text-2xl\" />\n              <h1 className=\"text-xl font-bold text-foreground\">TimeTracker Pro</h1>\n            </div>\n            <div className=\"hidden md:flex space-x-6\">\n              {canViewTimesheet && (\n                <Link href=\"/employee\">\n                  <button \n                    className={`${\n                      isEmployeeView \n                        ? \"text-primary font-medium border-b-2 border-primary pb-1\" \n                        : \"text-muted-foreground hover:text-foreground\"\n                    }`}\n                    data-testid=\"nav-employee\"\n                  >\n                    My Timesheet\n                  </button>\n                </Link>\n              )}\n              {canViewHR && (\n                <Link href=\"/hr\">\n                  <button \n                    className={`${\n                      isHRView \n                        ? \"text-primary font-medium border-b-2 border-primary pb-1\" \n                        : \"text-muted-foreground hover:text-foreground\"\n                    }`}\n                    data-testid=\"nav-hr\"\n                  >\n                    {user?.role === \"manager\" ? \"Manager Dashboard\" : \"HR Dashboard\"}\n                  </button>\n                </Link>\n              )}\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <span className=\"text-sm text-muted-foreground\">\n              Welcome, <span className=\"font-medium\" data-testid=\"user-name\">\n                {user ? `${user.firstName} ${user.lastName}` : \"Loading...\"}\n              </span>\n            </span>\n            <div className=\"text-xs text-muted-foreground bg-muted px-2 py-1 rounded\">\n              {user?.role?.toUpperCase()}\n            </div>\n            <div className=\"relative\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setShowUserMenu(!showUserMenu)}\n                className=\"flex items-center space-x-2 text-muted-foreground hover:text-foreground\"\n                data-testid=\"user-menu-button\"\n              >\n                <User className=\"h-4 w-4\" />\n                <ChevronDown className=\"h-3 w-3\" />\n              </Button>\n              \n              {showUserMenu && (\n                <div className=\"absolute right-0 top-full mt-1 w-64 bg-card border border-border rounded-md shadow-lg z-[9999]\" data-testid=\"user-menu\">\n                  <div className=\"py-2\">\n                    <div className=\"px-4 py-2 text-sm text-muted-foreground border-b border-border break-words\">\n                      {user?.email}\n                    </div>\n                    <button\n                      onClick={handleLogout}\n                      disabled={logoutMutation.isPending}\n                      className=\"flex items-center w-full text-left px-4 py-2 text-sm text-foreground hover:bg-muted transition-colors\"\n                      data-testid=\"logout-button\"\n                    >\n                      <LogOut className=\"h-4 w-4 mr-2\" />\n                      {logoutMutation.isPending ? \"Logging out...\" : \"Logout\"}\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Mobile Navigation */}\n      <div className=\"md:hidden border-t border-border\">\n        <div className=\"px-4 py-2 space-x-4\">\n          {canViewTimesheet && (\n            <Link href=\"/employee\">\n              <button \n                className={isEmployeeView ? \"text-primary font-medium\" : \"text-muted-foreground\"}\n                data-testid=\"nav-employee-mobile\"\n              >\n                My Timesheet\n              </button>\n            </Link>\n          )}\n          {canViewHR && (\n            <Link href=\"/hr\">\n              <button \n                className={isHRView ? \"text-primary font-medium\" : \"text-muted-foreground\"}\n                data-testid=\"nav-hr-mobile\"\n              >\n                {user?.role === \"manager\" ? \"Manager Dashboard\" : \"HR Dashboard\"}\n              </button>\n            </Link>\n          )}\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":5465},"client/src/components/stats-card.tsx":{"content":"import { LucideIcon } from \"lucide-react\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  className?: string;\n  testId?: string;\n}\n\nexport default function StatsCard({ title, value, icon: Icon, className = \"\", testId }: StatsCardProps) {\n  return (\n    <div className={`bg-card border border-border rounded-lg p-4 ${className}`} data-testid={testId}>\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-sm text-muted-foreground\" data-testid={`${testId}-title`}>{title}</p>\n          <p className=\"text-2xl font-bold text-foreground\" data-testid={`${testId}-value`}>{value}</p>\n        </div>\n        <Icon className=\"text-primary text-xl\" />\n      </div>\n    </div>\n  );\n}\n","size_bytes":768},"client/src/components/timesheet-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Save, X, Calendar } from \"lucide-react\";\nimport { format, startOfWeek, addDays } from \"date-fns\";\nimport { z } from \"zod\";\nimport { insertWorkEntrySchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { WorkHourRequestWithUser, WorkEntry } from \"@shared/schema\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Calendar as CalendarComponent } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\n\nconst workEntryFormSchema = insertWorkEntrySchema.extend({\n  date: z.string().min(1, \"Date is required\"),\n  workType: z.string().min(1, \"Work type is required\"),\n  description: z.string().min(1, \"Description is required\"),\n  timeSpent: z.string().min(1, \"Time spent is required\"),\n});\n\ntype WorkEntryFormData = z.infer<typeof workEntryFormSchema>;\n\nexport default function WorkEntryForm() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const todayDate = new Date().toISOString().split('T')[0];\n\n  // Get approved work hour requests\n  const { data: approvedRequests = [] } = useQuery<WorkHourRequestWithUser[]>({\n    queryKey: [\"/api/work-hour-requests/my\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/work-hour-requests/my\");\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch work hour requests\");\n      }\n      return response.json();\n    },\n  });\n\n  // Get my existing work entries to check for duplicates\n  const { data: myWorkEntries = [] } = useQuery<WorkEntry[]>({\n    queryKey: [\"/api/work-entries/my\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/work-entries/my\");\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch work entries\");\n      }\n      return response.json();\n    },\n  });\n\n  // Get approved dates that haven't been filled yet\n  const approvedDates = approvedRequests\n    .filter(request => request.status === \"approved\")\n    .map(request => request.requestedDate);\n\n  // Get dates that already have work entries\n  const existingEntryDates = myWorkEntries.map(entry => entry.date);\n\n  // Filter out approved dates that already have entries\n  const availableApprovedDates = approvedDates.filter(date => !existingEntryDates.includes(date));\n\n  const form = useForm<WorkEntryFormData>({\n    resolver: zodResolver(workEntryFormSchema),\n    defaultValues: {\n      date: todayDate,\n      workType: \"\",\n      description: \"\",\n      timeSpent: \"\",\n    },\n  });\n\n  const createWorkEntryMutation = useMutation({\n    mutationFn: async (data: WorkEntryFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/work-entries\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/work-entries/my\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Work entry saved successfully!\",\n      });\n      form.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save work entry\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: WorkEntryFormData) => {\n    // Validate that time spent is a valid number\n    const timeSpentNum = parseFloat(data.timeSpent);\n    if (isNaN(timeSpentNum) || timeSpentNum <= 0) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Time spent must be a valid number greater than 0\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Allow today's date and available approved request dates\n    const today = new Date().toISOString().split('T')[0];\n    const isToday = data.date === today;\n    const isAvailableApprovedDate = availableApprovedDates.includes(data.date);\n    \n    if (!isToday && !isAvailableApprovedDate) {\n      // Check if it's an approved date that already has an entry\n      if (approvedDates.includes(data.date) && existingEntryDates.includes(data.date)) {\n        toast({\n          title: \"Validation Error\",\n          description: \"You have already added a work entry for this approved date\",\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Validation Error\",\n          description: \"You can only add entries for today's date or approved work hour request dates\",\n          variant: \"destructive\",\n        });\n      }\n      return;\n    }\n\n    createWorkEntryMutation.mutate(data);\n  };\n\n  const handleClear = () => {\n    form.reset({\n      date: todayDate,\n      workType: \"\",\n      description: \"\",\n      timeSpent: \"\",\n    });\n  };\n\n  return (\n    <Card data-testid=\"work-entry-form\">\n      <CardHeader>\n        <CardTitle>Log Work Entry</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"date\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Date</FormLabel>\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <FormControl>\n                          <Button\n                            variant=\"outline\"\n                            className=\"w-full justify-start text-left font-normal\"\n                            data-testid=\"button-date-picker-form\"\n                          >\n                            <Calendar className=\"mr-2 h-4 w-4\" />\n                            {field.value ? format(new Date(field.value), \"PPP\") : \"Pick a date\"}\n                          </Button>\n                        </FormControl>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                        <CalendarComponent\n                          mode=\"single\"\n                          selected={field.value ? new Date(field.value) : undefined}\n                          onSelect={(date) => {\n                            if (date) {\n                              field.onChange(format(date, 'yyyy-MM-dd'));\n                            }\n                          }}\n                          disabled={(date) => {\n                            // Get today's date at start of day for proper comparison\n                            const today = new Date();\n                            today.setHours(0, 0, 0, 0);\n                            const compareDate = new Date(date);\n                            compareDate.setHours(0, 0, 0, 0);\n                            \n                            // Check if date is today\n                            const isToday = compareDate.getTime() === today.getTime();\n                            \n                            // Check if date is an available approved request date (not already filled)\n                            const dateStr = format(date, 'yyyy-MM-dd');\n                            const isAvailableApprovedDate = availableApprovedDates.includes(dateStr);\n                            \n                            // Also check if it's a weekend (Saturday = 6, Sunday = 0)\n                            const dayOfWeek = date.getDay();\n                            const isWeekend = dayOfWeek === 0 || dayOfWeek === 6;\n                            \n                            // Only disable weekends if the date is NOT approved (approved dates can be any weekday that was requested)\n                            if (isAvailableApprovedDate) {\n                              return false; // Always allow available approved dates regardless of day of week\n                            }\n                            \n                            // For non-approved dates, allow only today and disable weekends\n                            return !isToday || isWeekend;\n                          }}\n                          initialFocus\n                          data-testid=\"calendar-date-picker-form\"\n                        />\n                      </PopoverContent>\n                    </Popover>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"workType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Work Type</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-work-type\">\n                          <SelectValue placeholder=\"Select work type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"Task\">Task</SelectItem>\n                        <SelectItem value=\"Project\">Project</SelectItem>\n                        <SelectItem value=\"Meeting\">Meeting</SelectItem>\n                        <SelectItem value=\"Skill-up\">Skill-up</SelectItem>\n                        <SelectItem value=\"Partial Leave\">Partial Leave</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"timeSpent\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Time Spent (hours)</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        step=\"0.5\"\n                        min=\"0.5\"\n                        max=\"12\"\n                        placeholder=\"e.g. 2.5\"\n                        {...field}\n                        data-testid=\"input-time-spent\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Work Description</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      {...field}\n                      value={field.value || \"\"}\n                      rows={3}\n                      placeholder=\"Brief description of work performed...\"\n                      data-testid=\"input-description\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-3\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={handleClear}\n                data-testid=\"button-clear\"\n              >\n                <X className=\"w-4 h-4 mr-2\" />\n                Clear\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createWorkEntryMutation.isPending}\n                data-testid=\"button-save\"\n              >\n                <Save className=\"w-4 h-4 mr-2\" />\n                {createWorkEntryMutation.isPending ? \"Saving...\" : \"Add Entry\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":12357},"client/src/components/timesheet-table.tsx":{"content":"import { Eye, Edit, Trash2, Check, X } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n\nimport type { WorkEntry, WorkEntryWithUser } from \"@shared/schema\";\n\ninterface TimesheetTableProps {\n  timesheets: WorkEntry[] | WorkEntryWithUser[];\n  title: string;\n  showEmployeeInfo?: boolean;\n  showActions?: boolean;\n  showApprovalActions?: boolean; // New prop to control approve/reject visibility\n  selectedIds?: string[];\n  onSelectionChange?: (ids: string[]) => void;\n}\n\nexport default function TimesheetTable({ \n  timesheets, \n  title, \n  showEmployeeInfo = false, \n  showActions = true,\n  showApprovalActions = false,\n  selectedIds = [],\n  onSelectionChange\n}: TimesheetTableProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      const response = await apiRequest(\"PATCH\", `/api/work-entries/${id}/status`, { status });\n      return response.json();\n    },\n    onSuccess: (_, { status }) => {\n      // Invalidate all work entries queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/work-entries\"] });\n      \n      // Invalidate all stats queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      \n      // Invalidate users query for updated stats\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      \n      toast({\n        title: \"Success\",\n        description: `Work entry ${status === \"approved\" ? \"approved\" : \"rejected\"} successfully!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update timesheet status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteWorkEntryMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/work-entries/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate all work entries queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/work-entries\"] });\n      \n      // Invalidate all stats queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      \n      // Invalidate users query for updated stats\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      \n      toast({\n        title: \"Success\",\n        description: \"Work entry deleted successfully!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete work entry\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return (\n          <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\" data-testid=\"status-approved\">\n            <Check className=\"w-3 h-3 mr-1\" />\n            Approved\n          </Badge>\n        );\n      case \"rejected\":\n        return (\n          <Badge variant=\"destructive\" data-testid=\"status-rejected\">\n            <X className=\"w-3 h-3 mr-1\" />\n            Rejected\n          </Badge>\n        );\n      default:\n        return (\n          <Badge variant=\"outline\" className=\"bg-yellow-100 text-yellow-800\" data-testid=\"status-pending\">\n            Pending\n          </Badge>\n        );\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (onSelectionChange) {\n      onSelectionChange(checked ? timesheets.map(t => t.id) : []);\n    }\n  };\n\n  const handleSelectOne = (id: string, checked: boolean) => {\n    if (onSelectionChange) {\n      const newSelection = checked \n        ? [...selectedIds, id]\n        : selectedIds.filter(selectedId => selectedId !== id);\n      onSelectionChange(newSelection);\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  const getUserInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase();\n  };\n\n  return (\n    <Card data-testid=\"timesheet-table\">\n      <CardHeader>\n        <CardTitle>{title}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                {onSelectionChange && (\n                  <TableHead className=\"w-12\">\n                    <Checkbox\n                      checked={selectedIds.length === timesheets.length && timesheets.length > 0}\n                      onCheckedChange={handleSelectAll}\n                      data-testid=\"checkbox-select-all\"\n                    />\n                  </TableHead>\n                )}\n                {showEmployeeInfo && <TableHead>Employee</TableHead>}\n                <TableHead>Date</TableHead>\n                <TableHead>Time Spent</TableHead>\n                <TableHead>Work Type</TableHead>\n                <TableHead>Status</TableHead>\n                {showActions && <TableHead>Actions</TableHead>}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {timesheets.length === 0 ? (\n                <TableRow>\n                  <TableCell \n                    colSpan={showEmployeeInfo ? 6 : 5} \n                    className=\"text-center text-muted-foreground py-8\"\n                    data-testid=\"empty-state\"\n                  >\n                    No timesheet entries found\n                  </TableCell>\n                </TableRow>\n              ) : (\n                timesheets.map((timesheet) => (\n                  <TableRow key={timesheet.id} className=\"hover:bg-muted/50\" data-testid={`timesheet-row-${timesheet.id}`}>\n                    {onSelectionChange && (\n                      <TableCell>\n                        <Checkbox\n                          checked={selectedIds.includes(timesheet.id)}\n                          onCheckedChange={(checked) => handleSelectOne(timesheet.id, checked as boolean)}\n                          data-testid={`checkbox-${timesheet.id}`}\n                        />\n                      </TableCell>\n                    )}\n                    {showEmployeeInfo && 'user' in timesheet && (\n                      <TableCell>\n                        <div className=\"flex items-center\">\n                          <div className=\"w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-medium mr-3\">\n                            {getUserInitials(timesheet.user.firstName + ' ' + timesheet.user.lastName)}\n                          </div>\n                          <div>\n                            <div className=\"text-sm font-medium text-foreground\" data-testid={`employee-name-${timesheet.id}`}>\n                              {timesheet.user.firstName} {timesheet.user.lastName}\n                            </div>\n                            <div className=\"text-sm text-muted-foreground\" data-testid={`employee-dept-${timesheet.id}`}>\n                              {timesheet.user.department}\n                            </div>\n                          </div>\n                        </div>\n                      </TableCell>\n                    )}\n                    <TableCell className=\"text-sm text-foreground\" data-testid={`date-${timesheet.id}`}>\n                      {formatDate(timesheet.date)}\n                    </TableCell>\n                    <TableCell className=\"text-sm text-foreground\" data-testid={`time-spent-${timesheet.id}`}>\n                      {timesheet.timeSpent} hrs\n                    </TableCell>\n                    <TableCell className=\"text-sm text-foreground\" data-testid={`work-type-${timesheet.id}`}>\n                      {timesheet.workType}\n                    </TableCell>\n                    <TableCell data-testid={`status-${timesheet.id}`}>\n                      {getStatusBadge(timesheet.status)}\n                    </TableCell>\n                    {showActions && (\n                      <TableCell className=\"text-sm space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"text-blue-600 hover:text-blue-800\"\n                          title=\"View Details\"\n                          data-testid={`button-view-${timesheet.id}`}\n                        >\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                        \n                        {timesheet.status === \"pending\" && (\n                          <>\n                            {showApprovalActions || showEmployeeInfo ? (\n                              <>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"text-green-600 hover:text-green-800\"\n                                  title=\"Approve\"\n                                  onClick={() => {\n                                    if (window.confirm(\"Are you sure you want to approve this timesheet entry?\")) {\n                                      updateStatusMutation.mutate({ id: timesheet.id, status: \"approved\" });\n                                    }\n                                  }}\n                                  disabled={updateStatusMutation.isPending}\n                                  data-testid={`button-approve-${timesheet.id}`}\n                                >\n                                  <Check className=\"w-4 h-4\" />\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"text-red-600 hover:text-red-800\"\n                                  title=\"Reject\"\n                                  onClick={() => {\n                                    if (window.confirm(\"Are you sure you want to reject this timesheet entry?\")) {\n                                      updateStatusMutation.mutate({ id: timesheet.id, status: \"rejected\" });\n                                    }\n                                  }}\n                                  disabled={updateStatusMutation.isPending}\n                                  data-testid={`button-reject-${timesheet.id}`}\n                                >\n                                  <X className=\"w-4 h-4\" />\n                                </Button>\n                              </>\n                            ) : (\n                              <>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"text-primary hover:text-primary/80\"\n                                  title=\"Edit\"\n                                  data-testid={`button-edit-${timesheet.id}`}\n                                >\n                                  <Edit className=\"w-4 h-4\" />\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"text-destructive hover:text-destructive/80\"\n                                  title=\"Delete\"\n                                  onClick={() => {\n                                    if (window.confirm(\"Are you sure you want to delete this work entry?\")) {\n                                      deleteWorkEntryMutation.mutate(timesheet.id);\n                                    }\n                                  }}\n                                  data-testid={`button-delete-${timesheet.id}`}\n                                >\n                                  <Trash2 className=\"w-4 h-4\" />\n                                </Button>\n                              </>\n                            )}\n                          </>\n                        )}\n                      </TableCell>\n                    )}\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":12776},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: true, // Allow refetching when window gains focus\n      staleTime: 30 * 1000, // 30 seconds - allow queries to become stale\n      refetchOnMount: true, // Refetch when component mounts\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1534},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/employee-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Calendar, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { format, subDays, addDays, startOfWeek, subWeeks, endOfWeek } from \"date-fns\";\nimport WorkEntryForm from \"@/components/timesheet-form\";\nimport WorkHourRequestForm from \"@/components/work-hour-request-form\";\nimport SimpleWorkTable from \"@/components/simple-work-table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar as CalendarComponent } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\n\nimport type { WorkEntry } from \"@shared/schema\";\n\n\nexport default function EmployeeDashboard() {\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\n  const [weekOffset, setWeekOffset] = useState(0);\n  const daysInWeek = 5; // Monday to Friday only\n  \n  // Calculate the selected week range for highlighting\n  const getWorkWeekRange = (date: Date) => {\n    const weekStart = startOfWeek(date, { weekStartsOn: 1 }); // Monday\n    const weekEnd = addDays(weekStart, 4); // Friday\n    return { from: weekStart, to: weekEnd };\n  };\n  \n  const [selectedRange, setSelectedRange] = useState(() => getWorkWeekRange(new Date()));\n\n  // Calculate date range for selected week\n  const weekStart = startOfWeek(selectedDate, { weekStartsOn: 1 }); // Monday as start of week\n  const startDate = weekStart; // Use the selected week's Monday directly\n  const endDate = addDays(startDate, daysInWeek - 1); // Friday of the week\n  \n\n\n  const { data: workEntries = [], isLoading: entriesLoading } = useQuery<WorkEntry[]>({\n    queryKey: [\"/api/work-entries/my\", format(startDate, 'yyyy-MM-dd'), format(endDate, 'yyyy-MM-dd')],\n    queryFn: async () => {\n      const response = await fetch(`/api/work-entries/my?startDate=${format(startDate, 'yyyy-MM-dd')}&endDate=${format(endDate, 'yyyy-MM-dd')}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch work entries');\n      }\n      return response.json();\n    },\n  });\n\n  if (entriesLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"animate-pulse\">\n          <div className=\"bg-card border border-border rounded-lg p-6 h-96\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\" data-testid=\"employee-dashboard\">\n      <div className=\"space-y-6\">\n\n        {/* Work Entry Form */}\n        <WorkEntryForm />\n\n        {/* Work Hour Request Form */}\n        <WorkHourRequestForm />\n\n        {/* Date Filter and Work Entries */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-semibold\">My Work Entries</h2>\n            <div className=\"flex items-center space-x-2\">\n              {/* Date Picker */}\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-64 justify-start text-left font-normal\"\n                    data-testid=\"button-date-picker\"\n                  >\n                    <Calendar className=\"mr-2 h-4 w-4\" />\n                    {selectedDate ? format(selectedDate, \"PPP\") : \"Pick a date\"}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                  <CalendarComponent\n                    mode=\"single\"\n                    selected={selectedDate}\n                    onSelect={(date) => {\n                      if (date) {\n                        // Calculate the week difference between selected date and current date\n                        const currentWeekStart = startOfWeek(new Date(), { weekStartsOn: 1 });\n                        const selectedWeekStart = startOfWeek(date, { weekStartsOn: 1 });\n                        \n                        // Calculate how many weeks the selected date is from current week\n                        const weeksDiff = Math.round((currentWeekStart.getTime() - selectedWeekStart.getTime()) / (7 * 24 * 60 * 60 * 1000));\n                        \n                        const workWeekRange = getWorkWeekRange(date);\n                        setSelectedRange(workWeekRange);\n                        setSelectedDate(date);\n                        setWeekOffset(weeksDiff); // Set correct week offset for the selected date\n                      }\n                    }}\n                    modifiers={{\n                      range_start: selectedRange.from,\n                      range_middle: (date: Date) => {\n                        if (!selectedRange.from || !selectedRange.to) return false;\n                        return date > selectedRange.from && date < selectedRange.to;\n                      },\n                      range_end: selectedRange.to,\n                    }}\n                    modifiersClassNames={{\n                      range_start: \"bg-primary text-primary-foreground rounded-l-md\",\n                      range_middle: \"bg-primary text-primary-foreground\", \n                      range_end: \"bg-primary text-primary-foreground rounded-r-md\",\n                    }}\n                    disabled={(date) => {\n                      // Disable future dates\n                      if (date > new Date()) return true;\n                      // Disable weekends (Saturday = 6, Sunday = 0)\n                      const dayOfWeek = date.getDay();\n                      const isWeekend = dayOfWeek === 0 || dayOfWeek === 6;\n                      \n                      \n                      return isWeekend;\n                    }}\n                    initialFocus\n                    data-testid=\"calendar-date-picker\"\n                  />\n                </PopoverContent>\n              </Popover>\n\n              {/* Week Navigation Controls */}\n              <div className=\"flex items-center space-x-1\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    const newOffset = weekOffset + 1;\n                    setWeekOffset(newOffset);\n                    // Calculate from current date (today) and go back by newOffset weeks\n                    const currentWeekStart = startOfWeek(new Date(), { weekStartsOn: 1 });\n                    const newWeekStart = subWeeks(currentWeekStart, newOffset);\n                    const newSelectedDate = newWeekStart; // Use Monday of the new week\n                    setSelectedDate(newSelectedDate);\n                    setSelectedRange(getWorkWeekRange(newSelectedDate));\n                  }}\n                  disabled={startDate <= subDays(new Date(), 365)} // Limit to 1 year back\n                  data-testid=\"button-prev-week\"\n                >\n                  <ChevronLeft className=\"h-4 w-4\" />\n                  Previous week\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    const newOffset = Math.max(0, weekOffset - 1);\n                    setWeekOffset(newOffset);\n                    // Calculate from current date (today) and go back by newOffset weeks\n                    const currentWeekStart = startOfWeek(new Date(), { weekStartsOn: 1 });\n                    const newWeekStart = subWeeks(currentWeekStart, newOffset);\n                    const newSelectedDate = newWeekStart; // Use Monday of the new week\n                    setSelectedDate(newSelectedDate);\n                    setSelectedRange(getWorkWeekRange(newSelectedDate));\n                  }}\n                  disabled={weekOffset === 0}\n                  data-testid=\"button-next-week\"\n                >\n                  Next week\n                  <ChevronRight className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Date Range Display */}\n          <div className=\"text-sm text-muted-foreground\">\n            Showing entries from {format(startDate, \"MMM dd, yyyy\")} to {format(endDate, \"MMM dd, yyyy\")}\n          </div>\n\n          <SimpleWorkTable\n            workEntries={workEntries}\n            title={`Work Entries (${format(startDate, \"MMM dd\")} - ${format(endDate, \"MMM dd\")})`}\n            showEmployeeInfo={false}\n            expectedDays={daysInWeek}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8513},"client/src/pages/hr-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Clock, Users, BarChart3, FileText } from \"lucide-react\";\nimport { format, isToday } from \"date-fns\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nimport StatsCard from \"@/components/stats-card\";\nimport SimpleWorkTable from \"@/components/simple-work-table\";\nimport UserManagement from \"@/components/user-management\";\nimport UserManagementAdmin from \"@/components/user-management-admin\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\n\nimport type { WorkEntryWithUser, User } from \"@shared/schema\";\n\ninterface HRStats {\n  totalEmployees: number;\n  totalEntries: number;\n  avgHours: string;\n  totalHours: string;\n  submittedToday: number;\n  notSubmittedToday: number;\n}\n\nexport default function HRDashboard() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n  \n  const isManager = user?.role === \"manager\";\n  \n  // No longer need selectedUserForReport since we show inline worksheets\n\n  const { data: stats, isLoading: statsLoading } = useQuery<HRStats>({\n    queryKey: [\"/api/stats\"],\n  });\n\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const { data: allWorkEntries = [], isLoading: entriesLoading } = useQuery<WorkEntryWithUser[]>({\n    queryKey: [\"/api/work-entries\"],\n  });\n\n  if (statsLoading || entriesLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"animate-pulse\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n            {Array.from({ length: 4 }).map((_, i) => (\n              <div key={i} className=\"bg-card border border-border rounded-lg p-4 h-20\"></div>\n            ))}\n          </div>\n          <div className=\"bg-card border border-border rounded-lg p-6 h-96 mb-6\"></div>\n          <div className=\"bg-card border border-border rounded-lg p-6 h-96\"></div>\n        </div>\n      </div>\n    );\n  }\n\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\" data-testid=\"hr-dashboard\">\n      <div className=\"space-y-6\">\n        <Tabs defaultValue={isManager ? \"reports\" : \"dashboard\"} className=\"w-full\">\n          <TabsList className={`grid w-full ${isManager ? \"grid-cols-2\" : \"grid-cols-2\"}`}>\n            {!isManager && (\n              <TabsTrigger value=\"dashboard\" data-testid=\"tab-dashboard\">Dashboard</TabsTrigger>\n            )}\n            <TabsTrigger value=\"reports\" data-testid=\"tab-reports\">Employee Work Reports</TabsTrigger>\n            {isManager && (\n              <TabsTrigger value=\"users\" data-testid=\"tab-users\">User Management</TabsTrigger>\n            )}\n          </TabsList>\n          \n          {!isManager && (\n            <TabsContent value=\"dashboard\" className=\"space-y-6\">\n              {/* HR Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <StatsCard\n                title=\"Total Employees\"\n                value={stats?.totalEmployees || 0}\n                icon={Users}\n                className=\"text-blue-600\"\n                testId=\"stat-total-employees\"\n              />\n              <StatsCard\n                title=\"Submitted Today\"\n                value={stats?.submittedToday || 0}\n                icon={Clock}\n                className=\"text-green-600\"\n                testId=\"stat-submitted-today\"\n              />\n              <StatsCard\n                title=\"Not Submitted Today\"\n                value={stats?.notSubmittedToday || 0}\n                icon={Clock}\n                className=\"text-red-600\"\n                testId=\"stat-not-submitted-today\"\n              />\n              <StatsCard\n                title=\"Total Hours\"\n                value={stats?.totalHours || \"0.0\"}\n                icon={BarChart3}\n                className=\"text-purple-600\"\n                testId=\"stat-total-hours\"\n              />\n            </div>\n\n            </TabsContent>\n          )}\n\n          <TabsContent value=\"reports\" className=\"space-y-6\">\n            {/* Employee Work Hours Reports */}\n            <UserManagement />\n          </TabsContent>\n          \n          {isManager && (\n            <TabsContent value=\"users\" className=\"space-y-6\">\n              <UserManagementAdmin />\n            </TabsContent>\n          )}\n        </Tabs>\n        \n        {/* No longer need modal since worksheets are shown inline */}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4938},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/daily-work-report.tsx":{"content":"import { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Eye, Edit, Trash2, Check, X } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n\nimport type { WorkEntry, WorkEntryWithUser } from \"@shared/schema\";\n\ninterface DailyWorkReportProps {\n  workEntries: WorkEntry[] | WorkEntryWithUser[];\n  title: string;\n  showEmployeeInfo?: boolean;\n  showActions?: boolean;\n  selectedIds?: string[];\n  onSelectionChange?: (ids: string[]) => void;\n}\n\ninterface GroupedEntries {\n  [date: string]: (WorkEntry | WorkEntryWithUser)[];\n}\n\nexport default function DailyWorkReport({ \n  workEntries, \n  title, \n  showEmployeeInfo = false, \n  showActions = true,\n  selectedIds = [],\n  onSelectionChange\n}: DailyWorkReportProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      const response = await apiRequest(\"PATCH\", `/api/work-entries/${id}/status`, { status });\n      return response.json();\n    },\n    onSuccess: (_, { status }) => {\n      // Invalidate all work entries queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/work-entries\"] });\n      \n      // Invalidate all stats queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      \n      // Invalidate users query for updated stats\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      \n      toast({\n        title: \"Success\",\n        description: `Work entry ${status === \"approved\" ? \"approved\" : \"rejected\"} successfully!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update work entry status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteWorkEntryMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/work-entries/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate all work entries queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/work-entries\"] });\n      \n      // Invalidate all stats queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      \n      // Invalidate users query for updated stats\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      \n      toast({\n        title: \"Success\",\n        description: \"Work entry deleted successfully!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete work entry\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Group entries by date\n  const groupedEntries: GroupedEntries = workEntries.reduce((groups, entry) => {\n    const date = entry.date;\n    if (!groups[date]) {\n      groups[date] = [];\n    }\n    groups[date].push(entry);\n    return groups;\n  }, {} as GroupedEntries);\n\n  // Sort dates in descending order (newest first)\n  const sortedDates = Object.keys(groupedEntries).sort((a, b) => new Date(b).getTime() - new Date(a).getTime());\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return (\n          <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\" data-testid=\"status-approved\">\n            <Check className=\"w-3 h-3 mr-1\" />\n            Approved\n          </Badge>\n        );\n      case \"rejected\":\n        return (\n          <Badge variant=\"destructive\" data-testid=\"status-rejected\">\n            <X className=\"w-3 h-3 mr-1\" />\n            Rejected\n          </Badge>\n        );\n      default:\n        return (\n          <Badge variant=\"outline\" className=\"bg-yellow-100 text-yellow-800\" data-testid=\"status-pending\">\n            Pending\n          </Badge>\n        );\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  const getTotalHoursForDate = (entries: (WorkEntry | WorkEntryWithUser)[]) => {\n    return entries.reduce((total, entry) => total + parseFloat(entry.timeSpent), 0).toFixed(1);\n  };\n\n  const getUserInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase();\n  };\n\n  const canEditEntry = (entry: WorkEntry | WorkEntryWithUser) => {\n    const today = new Date().toISOString().split('T')[0];\n    return entry.date === today && entry.status === \"pending\";\n  };\n\n  return (\n    <Card data-testid=\"daily-work-report\">\n      <CardHeader>\n        <CardTitle>{title}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {sortedDates.length === 0 ? (\n          <div className=\"text-center text-muted-foreground py-8\" data-testid=\"empty-state\">\n            No work entries found\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {sortedDates.map((date) => {\n              const entries = groupedEntries[date];\n              const totalHours = getTotalHoursForDate(entries);\n              \n              return (\n                <div key={date} className=\"border rounded-lg overflow-hidden\">\n                  <div className=\"bg-muted/50 px-4 py-3 border-b\">\n                    <div className=\"flex justify-between items-center\">\n                      <div className=\"flex items-center space-x-4\">\n                        <h3 className=\"text-lg font-semibold text-foreground\" data-testid={`date-header-${date}`}>\n                          {formatDate(date)}\n                        </h3>\n                        {showEmployeeInfo && 'user' in entries[0] && (\n                          <div className=\"flex items-center\">\n                            <div className=\"w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-medium mr-3\">\n                              {getUserInitials(entries[0].user.firstName + ' ' + entries[0].user.lastName)}\n                            </div>\n                            <div>\n                              <div className=\"text-sm font-medium text-foreground\">\n                                {entries[0].user.firstName} {entries[0].user.lastName}\n                              </div>\n                              <div className=\"text-xs text-muted-foreground\">\n                                {entries[0].user.employeeId} - {entries[0].user.designation}\n                              </div>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"text-sm font-medium text-foreground\" data-testid={`total-hours-${date}`}>\n                        Total: {totalHours} hrs\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead className=\"w-[150px]\">Work Type</TableHead>\n                        <TableHead>Description</TableHead>\n                        <TableHead className=\"w-[100px]\">Hours</TableHead>\n                        <TableHead className=\"w-[100px]\">Status</TableHead>\n                        {showActions && <TableHead className=\"w-[120px]\">Actions</TableHead>}\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {entries.map((entry) => (\n                        <TableRow key={entry.id} className=\"hover:bg-muted/50\" data-testid={`entry-row-${entry.id}`}>\n                          <TableCell className=\"font-medium\" data-testid={`work-type-${entry.id}`}>\n                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                              entry.workType === 'Task' ? 'bg-blue-100 text-blue-800' :\n                              entry.workType === 'Project' ? 'bg-purple-100 text-purple-800' :\n                              entry.workType === 'Meeting' ? 'bg-green-100 text-green-800' :\n                              entry.workType === 'Skill-up' ? 'bg-orange-100 text-orange-800' :\n                              'bg-red-100 text-red-800'\n                            }`}>\n                              {entry.workType}\n                            </span>\n                          </TableCell>\n                          <TableCell className=\"text-sm text-foreground\" data-testid={`description-${entry.id}`}>\n                            {entry.description}\n                          </TableCell>\n                          <TableCell className=\"text-sm font-medium text-foreground\" data-testid={`hours-${entry.id}`}>\n                            {entry.timeSpent}\n                          </TableCell>\n                          <TableCell data-testid={`status-${entry.id}`}>\n                            {getStatusBadge(entry.status)}\n                          </TableCell>\n                          {showActions && (\n                            <TableCell className=\"text-sm space-x-1\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"text-blue-600 hover:text-blue-800\"\n                                title=\"View Details\"\n                                data-testid={`button-view-${entry.id}`}\n                              >\n                                <Eye className=\"w-4 h-4\" />\n                              </Button>\n                              \n                              {entry.status === \"pending\" && (\n                                <>\n                                  {!showEmployeeInfo && canEditEntry(entry) ? (\n                                    <>\n                                      <Button\n                                        variant=\"ghost\"\n                                        size=\"sm\"\n                                        className=\"text-primary hover:text-primary/80\"\n                                        title=\"Edit\"\n                                        data-testid={`button-edit-${entry.id}`}\n                                      >\n                                        <Edit className=\"w-4 h-4\" />\n                                      </Button>\n                                      <Button\n                                        variant=\"ghost\"\n                                        size=\"sm\"\n                                        className=\"text-destructive hover:text-destructive/80\"\n                                        title=\"Delete\"\n                                        onClick={() => {\n                                          if (window.confirm(\"Are you sure you want to delete this work entry?\")) {\n                                            deleteWorkEntryMutation.mutate(entry.id);\n                                          }\n                                        }}\n                                        data-testid={`button-delete-${entry.id}`}\n                                      >\n                                        <Trash2 className=\"w-4 h-4\" />\n                                      </Button>\n                                    </>\n                                  ) : showEmployeeInfo && (\n                                    <>\n                                      <Button\n                                        variant=\"ghost\"\n                                        size=\"sm\"\n                                        className=\"text-green-600 hover:text-green-800\"\n                                        title=\"Approve\"\n                                        onClick={() => {\n                                          if (window.confirm(\"Are you sure you want to approve this work entry?\")) {\n                                            updateStatusMutation.mutate({ id: entry.id, status: \"approved\" });\n                                          }\n                                        }}\n                                        disabled={updateStatusMutation.isPending}\n                                        data-testid={`button-approve-${entry.id}`}\n                                      >\n                                        <Check className=\"w-4 h-4\" />\n                                      </Button>\n                                      <Button\n                                        variant=\"ghost\"\n                                        size=\"sm\"\n                                        className=\"text-red-600 hover:text-red-800\"\n                                        title=\"Reject\"\n                                        onClick={() => {\n                                          if (window.confirm(\"Are you sure you want to reject this work entry?\")) {\n                                            updateStatusMutation.mutate({ id: entry.id, status: \"rejected\" });\n                                          }\n                                        }}\n                                        disabled={updateStatusMutation.isPending}\n                                        data-testid={`button-reject-${entry.id}`}\n                                      >\n                                        <X className=\"w-4 h-4\" />\n                                      </Button>\n                                    </>\n                                  )}\n                                </>\n                              )}\n                            </TableCell>\n                          )}\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":14164},"client/src/components/simple-work-table.tsx":{"content":"import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { format } from \"date-fns\";\n\nimport type { WorkEntry, WorkEntryWithUser } from \"@shared/schema\";\n\ninterface SimpleWorkTableProps {\n  workEntries: WorkEntry[] | WorkEntryWithUser[];\n  title: string;\n  showEmployeeInfo?: boolean;\n  expectedDays?: number; // Expected number of days in the viewing period\n}\n\ninterface GroupedEntries {\n  [date: string]: (WorkEntry | WorkEntryWithUser)[];\n}\n\nexport default function SimpleWorkTable({ \n  workEntries, \n  title, \n  showEmployeeInfo = false,\n  expectedDays\n}: SimpleWorkTableProps) {\n  \n  // Group entries by date\n  const groupedEntries = workEntries.reduce<GroupedEntries>((acc, entry) => {\n    const entryDate = format(new Date(entry.date), 'dd/MM/yyyy');\n    if (!acc[entryDate]) {\n      acc[entryDate] = [];\n    }\n    acc[entryDate].push(entry);\n    return acc;\n  }, {});\n\n  // Sort dates in descending order (most recent first)\n  const sortedDates = Object.keys(groupedEntries).sort((a, b) => {\n    const dateA = new Date(a.split('/').reverse().join('/'));\n    const dateB = new Date(b.split('/').reverse().join('/'));\n    return dateB.getTime() - dateA.getTime();\n  });\n\n  const getWorkTypeColor = (workType: string) => {\n    const colors: Record<string, string> = {\n      \"Task\": \"text-blue-700\",\n      \"Project\": \"text-green-700\", \n      \"Meeting\": \"text-purple-700\",\n      \"Skill-up\": \"text-orange-700\",\n      \"Partial Leave\": \"text-red-700\"\n    };\n    return colors[workType] || \"text-gray-700\";\n  };\n\n  if (workEntries.length === 0) {\n    return (\n      <Card data-testid=\"simple-work-table\">\n        <CardHeader className=\"py-2 px-3\">\n          <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"text-center py-8 text-muted-foreground text-xs\" data-testid=\"no-work-entries\">\n            No work entries found\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card data-testid=\"simple-work-table\">\n      <CardHeader className=\"py-2 px-3\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-0\">\n        <div className=\"relative max-h-[300px] overflow-auto\">\n          <Table className=\"border border-border border-collapse table-fixed text-xs [&_th]:border [&_td]:border [&_th]:border-border [&_td]:border-border [&_th]:bg-muted/30 [&_th]:text-foreground [&_th]:font-medium [&_th]:px-2 [&_th]:py-1 [&_td]:px-2 [&_td]:py-1 [&_tr:nth-child(even)]:bg-muted/10\">\n            <TableHeader className=\"sticky top-0 z-10\">\n              <TableRow>\n                <TableHead className=\"w-20 text-center\">Date</TableHead>\n                <TableHead className=\"w-20 text-center\">Work Type</TableHead>\n                <TableHead className=\"text-left\">Description</TableHead>\n                {showEmployeeInfo && (\n                  <TableHead className=\"w-32 text-center\">Employee</TableHead>\n                )}\n                <TableHead className=\"w-20 text-right\">Work Hours</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {sortedDates.map((date) => {\n                const entries = groupedEntries[date];\n                const dailyTotal = entries.reduce((sum, entry) => sum + parseFloat(entry.timeSpent), 0);\n                \n                return entries.map((entry, index) => {\n                  const hasEmployeeInfo = 'user' in entry && entry.user;\n                  \n                  return (\n                    <TableRow \n                      key={`${entry.id}-${index}`} \n                      className=\"hover:bg-muted/20\"\n                      data-testid={`work-entry-row-${entry.id}`}\n                    >\n                      {/* Date column - only show for first entry of each date */}\n                      <TableCell \n                        className=\"text-xs text-center align-middle font-medium\"\n                        data-testid={`date-${entry.id}`}\n                        rowSpan={index === 0 ? entries.length : undefined}\n                        style={index === 0 ? {} : { display: 'none' }}\n                      >\n                        {index === 0 && (\n                          <div className=\"text-xs font-medium\">\n                            {date}\n                          </div>\n                        )}\n                      </TableCell>\n                      \n                      {/* Work Type */}\n                      <TableCell \n                        className=\"text-xs text-center\" \n                        data-testid={`work-type-${entry.id}`}\n                      >\n                        <span className={`${getWorkTypeColor(entry.workType)} font-medium text-xs`}>\n                          {entry.workType}\n                        </span>\n                      </TableCell>\n                      \n                      {/* Description */}\n                      <TableCell \n                        className=\"text-xs text-left\" \n                        data-testid={`description-${entry.id}`}\n                      >\n                        <div className=\"truncate\" title={entry.description}>\n                          {entry.description || '-'}\n                        </div>\n                      </TableCell>\n                      \n                      {/* Employee Info (if shown) */}\n                      {showEmployeeInfo && (\n                        <TableCell \n                          className=\"text-xs text-center\" \n                          data-testid={`employee-${entry.id}`}\n                        >\n                          {hasEmployeeInfo ? (\n                            <div className=\"truncate\">\n                              <div className=\"font-medium text-xs\">\n                                {entry.user.firstName} {entry.user.lastName}\n                              </div>\n                              <div className=\"text-xs text-muted-foreground\">\n                                {entry.user.employeeId}\n                              </div>\n                            </div>\n                          ) : (\n                            <div className=\"text-muted-foreground text-xs\">-</div>\n                          )}\n                        </TableCell>\n                      )}\n                      \n                      {/* Work Hours */}\n                      <TableCell \n                        className=\"text-xs text-right font-medium tabular-nums\" \n                        data-testid={`hours-${entry.id}`}\n                      >\n                        {parseFloat(entry.timeSpent).toFixed(1)}h\n                      </TableCell>\n                    </TableRow>\n                  );\n                });\n              })}\n            </TableBody>\n          </Table>\n        </div>\n        \n        {/* Summary footer */}\n        <div className=\"px-3 py-2 border-t border-border bg-muted/20\">\n          <div className=\"flex justify-between text-xs font-medium\">\n            <span>\n              Total Entries: {workEntries.length} | Total Days: {expectedDays || sortedDates.length}\n            </span>\n            <span className=\"tabular-nums\">\n              Total Hours: {workEntries.reduce((sum, entry) => sum + parseFloat(entry.timeSpent), 0).toFixed(1)}h\n            </span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7551},"client/src/components/user-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { format, startOfWeek, addDays, subWeeks } from \"date-fns\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Calendar as CalendarComponent } from \"@/components/ui/calendar\";\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\";\nimport { Check, ChevronLeft, ChevronRight, Calendar, Download, ChevronsUpDown } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport SimpleWorkTable from \"./simple-work-table\";\nimport type { User, WorkEntryWithUser } from \"@shared/schema\";\nimport * as React from \"react\";\n\ninterface UserManagementProps {\n  // No longer need onViewReport since we're showing inline\n}\n\nexport default function UserManagement({}: UserManagementProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const isManager = user?.role === \"manager\";\n  \n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\n  const [weekOffset, setWeekOffset] = useState(0);\n  \n  // Manager-specific state for multi-select dropdown\n  const [selectedEmployees, setSelectedEmployees] = useState<string[]>([]);\n  const [employeeDropdownOpen, setEmployeeDropdownOpen] = useState(false);\n  \n  // Calculate the selected week range for highlighting\n  const getWorkWeekRange = (date: Date) => {\n    const weekStart = startOfWeek(date, { weekStartsOn: 1 }); // Monday\n    const weekEnd = addDays(weekStart, 4); // Friday\n    return { from: weekStart, to: weekEnd };\n  };\n  \n  const [selectedRange, setSelectedRange] = useState(() => getWorkWeekRange(new Date()));\n  const [selectedUsers, setSelectedUsers] = useState<Set<string>>(new Set());\n\n  const daysInWeek = 5; // Monday to Friday only\n\n  // Calculate date range for selected week\n  const weekStart = startOfWeek(selectedDate, { weekStartsOn: 1 }); // Monday as start of week\n  const startDate = weekStart; // Use the selected week's Monday directly\n  const endDate = addDays(startDate, daysInWeek - 1); // Friday of the week\n  \n  // Update selected range when week offset changes\n  const updateSelectedRangeForWeek = () => {\n    const newRange = getWorkWeekRange(startDate);\n    setSelectedRange(newRange);\n  };\n\n  const { data: users = [], isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n    refetchIntervalInBackground: true,\n  });\n\n  const { data: allWorkEntries = [] } = useQuery<WorkEntryWithUser[]>({\n    queryKey: [\"/api/work-entries\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n    refetchIntervalInBackground: true,\n  });\n  \n  // Manager preferences queries\n  const { data: managerPreferences } = useQuery({\n    queryKey: [\"/api/manager-preferences\"],\n    enabled: isManager,\n    refetchInterval: 30000, // Refresh every 30 seconds\n    refetchIntervalInBackground: true,\n  });\n\n  // For employee selection dropdown: Include only employees and HR, exclude managers\n  const selectableUsers = users.filter(user => user.role === \"employee\" || user.role === \"hr\");\n  \n  // Initialize with all employees by default for this week's reports\n  React.useEffect(() => {\n    if (users.length > 0) {\n      // Get all selectable users (employees and HR, exclude managers)\n      const allSelectableUserIds = selectableUsers.map(user => user.id);\n      \n      if (isManager) {\n        // For managers: check if there are saved preferences, otherwise show all employees\n        if (managerPreferences && typeof managerPreferences === 'object' && managerPreferences !== null) {\n          const savedSelectedIds = (managerPreferences as any).selectedEmployeeIds;\n          if (Array.isArray(savedSelectedIds) && savedSelectedIds.length > 0) {\n            setSelectedEmployees(savedSelectedIds);\n            setSelectedUsers(new Set(savedSelectedIds));\n          } else {\n            // No saved preferences, show all employees by default\n            setSelectedEmployees(allSelectableUserIds);\n            setSelectedUsers(new Set(allSelectableUserIds));\n          }\n        } else {\n          // No preferences loaded yet, show all employees by default\n          setSelectedEmployees(allSelectableUserIds);\n          setSelectedUsers(new Set(allSelectableUserIds));\n        }\n      } else {\n        // For HR: show all employees by default\n        setSelectedUsers(new Set(allSelectableUserIds));\n      }\n    }\n  }, [isManager, managerPreferences, users.length, selectableUsers]);\n  \n  const savePreferencesMutation = useMutation({\n    mutationFn: async (selectedEmployeeIds: string[]) => {\n      const res = await apiRequest(\"POST\", \"/api/manager-preferences\", { selectedEmployeeIds });\n      return res;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/manager-preferences\"] });\n      toast({\n        title: \"Preferences saved\",\n        description: \"Your employee selection has been saved.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error saving preferences\",\n        description: \"There was an error saving your preferences. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handle user toggle for HR (using Set)\n  const handleUserToggle = (userId: string) => {\n    const newSelectedUsers = new Set(selectedUsers);\n    if (newSelectedUsers.has(userId)) {\n      newSelectedUsers.delete(userId);\n    } else {\n      newSelectedUsers.add(userId);\n    }\n    setSelectedUsers(newSelectedUsers);\n  };\n\n  // Handle employee selection for managers (using array and auto-save)\n  const handleEmployeeSelection = (employeeId: string) => {\n    const newSelected = selectedEmployees.includes(employeeId)\n      ? selectedEmployees.filter(id => id !== employeeId)\n      : [...selectedEmployees, employeeId];\n    \n    setSelectedEmployees(newSelected);\n    setSelectedUsers(new Set(newSelected));\n    \n    // Auto-save preferences for managers\n    if (isManager) {\n      savePreferencesMutation.mutate(newSelected);\n    }\n  };\n\n  // Get filtered work entries for selected date range\n  const getFilteredWorkEntries = (userId: string) => {\n    return allWorkEntries.filter(entry => \n      entry.userId === userId &&\n      entry.date >= format(startDate, 'yyyy-MM-dd') &&\n      entry.date <= format(endDate, 'yyyy-MM-dd')\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Employee Work Hours Reports</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-4\">\n            {Array.from({ length: 5 }).map((_, i) => (\n              <div key={i} className=\"h-12 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card data-testid=\"user-management\">\n      <CardHeader className=\"py-2 px-3\">\n        <div className=\"flex justify-between items-center\">\n          <CardTitle className=\"text-sm font-medium\">Employee Work Hours Reports</CardTitle>\n          {!isManager && (\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"h-8 px-2 text-xs text-green-600 hover:text-green-800\"\n                data-testid=\"button-export-employees\"\n              >\n                <Download className=\"w-3 h-3 mr-1\" />\n                Export\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Date Selection and Week Navigation */}\n        <div className=\"flex items-center justify-between mt-3 pt-3 border-t border-border\">\n          <div className=\"flex items-center space-x-2\">\n            {/* Date Picker */}\n            <Popover>\n              <PopoverTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  className=\"w-56 justify-start text-left font-normal h-8 text-xs\"\n                  data-testid=\"date-picker-trigger\"\n                >\n                  <Calendar className=\"mr-2 h-3 w-3\" />\n                  {format(selectedDate, \"PPP\")}\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-auto p-0\">\n                <CalendarComponent\n                  mode=\"single\"\n                  selected={selectedDate}\n                  onSelect={(date) => {\n                    if (date) {\n                      // When user selects any date, calculate the work week for that date\n                      setSelectedDate(date);\n                      const newRange = getWorkWeekRange(date);\n                      setSelectedRange(newRange);\n                      // Reset week offset when selecting a specific date\n                      setWeekOffset(0);\n                    }\n                  }}\n                  modifiers={{\n                    range_start: selectedRange.from,\n                    range_middle: (date: Date) => {\n                      if (!selectedRange.from || !selectedRange.to) return false;\n                      return date > selectedRange.from && date < selectedRange.to;\n                    },\n                    range_end: selectedRange.to,\n                  }}\n                  modifiersClassNames={{\n                    range_start: \"bg-primary text-primary-foreground rounded-l-md\",\n                    range_middle: \"bg-primary text-primary-foreground\", \n                    range_end: \"bg-primary text-primary-foreground rounded-r-md\",\n                  }}\n                  disabled={(date) => {\n                    // Disable future dates\n                    if (date > new Date()) return true;\n                    // Disable weekends (Saturday = 6, Sunday = 0)\n                    const dayOfWeek = date.getDay();\n                    const isWeekend = dayOfWeek === 0 || dayOfWeek === 6;\n                    return isWeekend;\n                  }}\n                  initialFocus\n                  data-testid=\"calendar-component\"\n                />\n              </PopoverContent>\n            </Popover>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"h-8 w-8 p-0\"\n              onClick={() => {\n                const newOffset = weekOffset + 1;\n                setWeekOffset(newOffset);\n                // Calculate from current date (today) and go back by newOffset weeks\n                const currentWeekStart = startOfWeek(new Date(), { weekStartsOn: 1 });\n                const newWeekStart = subWeeks(currentWeekStart, newOffset);\n                const newSelectedDate = newWeekStart; // Use Monday of the new week\n                setSelectedDate(newSelectedDate);\n                setSelectedRange(getWorkWeekRange(newSelectedDate));\n              }}\n              data-testid=\"week-prev\"\n            >\n              <ChevronLeft className=\"h-3 w-3\" />\n            </Button>\n            \n            <span className=\"text-xs font-medium px-2 whitespace-nowrap\" data-testid=\"week-range\">\n              {format(startDate, \"MMM dd\")} - {format(endDate, \"MMM dd\")}\n            </span>\n            \n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"h-8 w-8 p-0\"\n              onClick={() => {\n                const newOffset = Math.max(0, weekOffset - 1);\n                setWeekOffset(newOffset);\n                // Calculate from current date (today) and go back by newOffset weeks\n                const currentWeekStart = startOfWeek(new Date(), { weekStartsOn: 1 });\n                const newWeekStart = subWeeks(currentWeekStart, newOffset);\n                const newSelectedDate = newWeekStart; // Use Monday of the new week\n                setSelectedDate(newSelectedDate);\n                setSelectedRange(getWorkWeekRange(newSelectedDate));\n              }}\n              disabled={weekOffset === 0}\n              data-testid=\"week-next\"\n            >\n              <ChevronRight className=\"h-3 w-3\" />\n            </Button>\n          </div>\n        </div>\n        \n        <div className=\"text-xs text-muted-foreground\">\n          {weekOffset === 0 ? \"This Week\" : `${weekOffset} week${weekOffset === 1 ? \"\" : \"s\"} ago`}\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-0\">\n        {isManager ? (\n          // Manager UI with multi-select dropdown\n          <div className=\"p-4\">\n            <div className=\"mb-4\">\n              <label className=\"text-sm font-medium mb-2 block\">Select Employees to View Reports</label>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"flex-1 border rounded-md p-2 min-h-[40px] flex flex-wrap gap-1 items-center\">\n                  {selectedEmployees.length === 0 ? (\n                    <span className=\"text-muted-foreground text-sm\">Select employees...</span>\n                  ) : (\n                    selectedEmployees.map(id => {\n                      const emp = users.find(u => u.id === id);\n                      if (!emp) return null;\n                      return (\n                        <span key={id} className=\"inline-flex items-center gap-1 bg-secondary text-secondary-foreground px-2 py-1 rounded text-sm\">\n                          {emp.firstName} {emp.lastName}\n                          <button\n                            onClick={() => handleEmployeeSelection(id)}\n                            className=\"hover:bg-destructive/20 rounded-full w-4 h-4 flex items-center justify-center\"\n                            data-testid={`remove-employee-${emp.employeeId}`}\n                          >\n                            ×\n                          </button>\n                        </span>\n                      );\n                    })\n                  )}\n                </div>\n                <Popover open={employeeDropdownOpen} onOpenChange={setEmployeeDropdownOpen}>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"h-10 w-10 p-0\"\n                      data-testid=\"employee-selector\"\n                    >\n                      <ChevronsUpDown className=\"h-4 w-4\" />\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-full p-0\">\n                    <Command>\n                      <CommandInput placeholder=\"Search employees...\" />\n                      <CommandList>\n                        <CommandEmpty>No employees found.</CommandEmpty>\n                        <CommandGroup>\n                          {selectableUsers.map((user) => (\n                            <CommandItem\n                              key={user.id}\n                              value={user.id}\n                              onSelect={() => handleEmployeeSelection(user.id)}\n                              data-testid={`employee-option-${user.employeeId}`}\n                            >\n                              <Check\n                                className={cn(\n                                  \"mr-2 h-4 w-4\",\n                                  selectedEmployees.includes(user.id) ? \"opacity-100\" : \"opacity-0\"\n                                )}\n                              />\n                              <div className=\"flex-1\">\n                                <div className=\"font-medium\">{user.firstName} {user.lastName}</div>\n                                <div className=\"text-sm text-muted-foreground\">{user.department} - {user.designation}</div>\n                              </div>\n                            </CommandItem>\n                          ))}\n                        </CommandGroup>\n                      </CommandList>\n                    </Command>\n                  </PopoverContent>\n                </Popover>\n              </div>\n            </div>\n            \n            {selectedEmployees.length > 0 && (\n              <div className=\"overflow-auto space-y-4\" style={{ maxHeight: 'calc(100vh - 600px)' }}>\n                {selectedEmployees.map((employeeId) => {\n                  const employee = users.find(u => u.id === employeeId);\n                  if (!employee) return null;\n                  return (\n                    <div key={employeeId} className=\"border rounded-md\" data-testid={`manager-worksheet-${employee.employeeId}`}>\n                      <SimpleWorkTable\n                        workEntries={getFilteredWorkEntries(employeeId)}\n                        title={`${employee.firstName} ${employee.lastName} - Work Hours (${format(startDate, \"MMM dd\")} - ${format(endDate, \"MMM dd\")})`}\n                        showEmployeeInfo={false}\n                        expectedDays={5}\n                      />\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        ) : (\n          // HR UI with same multi-select approach as manager\n          <div className=\"p-4\">\n            <div className=\"mb-4\">\n              <label className=\"text-sm font-medium mb-2 block\">Select Employees to View Reports</label>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"flex-1 border rounded-md p-2 min-h-[40px] flex flex-wrap gap-1 items-center\">\n                  {selectedUsers.size === 0 ? (\n                    <span className=\"text-muted-foreground text-sm\">Select employees...</span>\n                  ) : (\n                    Array.from(selectedUsers).map(id => {\n                      const emp = users.find(u => u.id === id);\n                      if (!emp) return null;\n                      return (\n                        <span key={id} className=\"inline-flex items-center gap-1 bg-secondary text-secondary-foreground px-2 py-1 rounded text-sm\">\n                          {emp.firstName} {emp.lastName}\n                          <button\n                            onClick={() => handleUserToggle(id)}\n                            className=\"hover:bg-destructive/20 rounded-full w-4 h-4 flex items-center justify-center\"\n                            data-testid={`remove-employee-${emp.employeeId}`}\n                          >\n                            ×\n                          </button>\n                        </span>\n                      );\n                    })\n                  )}\n                </div>\n                <Popover open={employeeDropdownOpen} onOpenChange={setEmployeeDropdownOpen}>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"h-10 w-10 p-0\"\n                      data-testid=\"employee-selector\"\n                    >\n                      <ChevronsUpDown className=\"h-4 w-4\" />\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-full p-0\">\n                    <Command>\n                      <CommandInput placeholder=\"Search employees...\" />\n                      <CommandList>\n                        <CommandEmpty>No employees found.</CommandEmpty>\n                        <CommandGroup>\n                          {selectableUsers.map((user) => (\n                            <CommandItem\n                              key={user.id}\n                              value={user.id}\n                              onSelect={() => handleUserToggle(user.id)}\n                              data-testid={`employee-option-${user.employeeId}`}\n                            >\n                              <Check\n                                className={cn(\n                                  \"mr-2 h-4 w-4\",\n                                  selectedUsers.has(user.id) ? \"opacity-100\" : \"opacity-0\"\n                                )}\n                              />\n                              <div className=\"flex-1\">\n                                <div className=\"font-medium\">{user.firstName} {user.lastName}</div>\n                                <div className=\"text-sm text-muted-foreground\">{user.department} - {user.designation}</div>\n                              </div>\n                            </CommandItem>\n                          ))}\n                        </CommandGroup>\n                      </CommandList>\n                    </Command>\n                  </PopoverContent>\n                </Popover>\n              </div>\n            </div>\n            \n            {selectedUsers.size > 0 && (\n              <div className=\"overflow-auto space-y-4\" style={{ maxHeight: 'calc(100vh - 600px)' }}>\n                {Array.from(selectedUsers).map((userId) => {\n                  const employee = users.find(u => u.id === userId);\n                  if (!employee) return null;\n                  return (\n                    <div key={userId} className=\"border rounded-md\" data-testid={`hr-worksheet-${employee.employeeId}`}>\n                      <SimpleWorkTable\n                        workEntries={getFilteredWorkEntries(userId)}\n                        title={`${employee.firstName} ${employee.lastName} - Work Hours (${format(startDate, \"MMM dd\")} - ${format(endDate, \"MMM dd\")})`}\n                        showEmployeeInfo={false}\n                        expectedDays={5}\n                      />\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":21808},"client/src/pages/login.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { User } from \"lucide-react\";\n\nexport default function LoginPage() {\n  const handleMicrosoftLogin = () => {\n    window.location.href = \"/api/auth/microsoft\";\n  };\n\n  const handleDemoLogin = async (role: \"employee\" | \"hr\") => {\n    try {\n      const response = await fetch(\"/api/auth/switch-role\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ role }),\n      });\n\n      if (response.ok) {\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error(\"Demo login failed:\", error);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl font-bold\">TimeTracker Pro</CardTitle>\n          <CardDescription>\n            Sign in to access your timesheet management system\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Button\n            onClick={handleMicrosoftLogin}\n            className=\"w-full bg-[#0078d4] hover:bg-[#106ebe] text-white\"\n            data-testid=\"button-microsoft-login\"\n          >\n            <svg className=\"w-5 h-5 mr-2\" viewBox=\"0 0 23 23\">\n              <path fill=\"#f3f3f3\" d=\"M0 0h23v23H0z\"/>\n              <path fill=\"#f35325\" d=\"M1 1h10v10H1z\"/>\n              <path fill=\"#81bc06\" d=\"M12 1h10v10H12z\"/>\n              <path fill=\"#05a6f0\" d=\"M1 12h10v10H1z\"/>\n              <path fill=\"#ffba08\" d=\"M12 12h10v10H12z\"/>\n            </svg>\n            Sign in with Microsoft 365\n          </Button>\n\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <Separator className=\"w-full\" />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-background px-2 text-muted-foreground\">\n                Or try demo mode\n              </span>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Button\n              onClick={() => handleDemoLogin(\"employee\")}\n              variant=\"outline\"\n              className=\"w-full\"\n              data-testid=\"button-demo-employee\"\n            >\n              <User className=\"w-4 h-4 mr-2\" />\n              Demo as Employee\n            </Button>\n            <Button\n              onClick={() => handleDemoLogin(\"hr\")}\n              variant=\"outline\"\n              className=\"w-full\"\n              data-testid=\"button-demo-hr\"\n            >\n              <User className=\"w-4 h-4 mr-2\" />\n              Demo as HR Manager\n            </Button>\n          </div>\n\n          <div className=\"text-xs text-center text-muted-foreground mt-4\">\n            <p>Demo mode allows you to explore the application features</p>\n            <p>without setting up Microsoft 365 authentication.</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3249},"server/auth/microsoft.ts":{"content":"import { ConfidentialClientApplication, AuthenticationResult } from \"@azure/msal-node\";\nimport axios from \"axios\";\n\ninterface MicrosoftUser {\n  id: string;\n  displayName: string;\n  givenName: string;\n  surname: string;\n  mail: string;\n  userPrincipalName: string;\n}\n\nclass MicrosoftAuthService {\n  private msalInstance: ConfidentialClientApplication;\n  private redirectUri: string;\n\n  constructor() {\n    const clientId = process.env.MICROSOFT_CLIENT_ID;\n    const clientSecret = process.env.MICROSOFT_CLIENT_SECRET;\n    \n    if (!clientId || !clientSecret) {\n      throw new Error(\"Microsoft OAuth credentials not configured\");\n    }\n\n    // Get the base URL from environment or construct from host\n    const baseUrl = process.env.REPL_SLUG \n      ? `https://${process.env.REPL_SLUG}.${process.env.REPL_OWNER}.repl.co`\n      : `http://localhost:5000`;\n    \n    this.redirectUri = `${baseUrl}/api/auth/microsoft/callback`;\n\n    const msalConfig = {\n      auth: {\n        clientId,\n        clientSecret,\n        authority: \"https://login.microsoftonline.com/common\"\n      }\n    };\n\n    this.msalInstance = new ConfidentialClientApplication(msalConfig);\n  }\n\n  async getAuthUrl(): Promise<string> {\n    const authCodeUrlParameters = {\n      scopes: [\"user.read\", \"openid\", \"profile\", \"email\"],\n      redirectUri: this.redirectUri,\n    };\n\n    return await this.msalInstance.getAuthCodeUrl(authCodeUrlParameters);\n  }\n\n  async handleCallback(code: string): Promise<AuthenticationResult> {\n    const tokenRequest = {\n      code,\n      scopes: [\"user.read\", \"openid\", \"profile\", \"email\"],\n      redirectUri: this.redirectUri,\n    };\n\n    return await this.msalInstance.acquireTokenByCode(tokenRequest);\n  }\n\n  async getUserInfo(accessToken: string): Promise<MicrosoftUser> {\n    const response = await axios.get('https://graph.microsoft.com/v1.0/me', {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n\n    return response.data;\n  }\n}\n\nexport const microsoftAuth = new MicrosoftAuthService();","size_bytes":2020},"client/src/components/auth-guard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport LoginPage from \"@/pages/login\";\n\ninterface AuthGuardProps {\n  children: React.ReactNode;\n}\n\nexport default function AuthGuard({ children }: AuthGuardProps) {\n  const { data: currentUser, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-sm text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !currentUser) {\n    return <LoginPage />;\n  }\n\n  return <>{children}</>;\n}","size_bytes":807},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser, PublicUser, insertUserSchema } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\n// Helper to remove password from user object\nfunction sanitizeUser(user: SelectUser): PublicUser {\n  const { password, ...publicUser } = user;\n  return publicUser;\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"dev-secret-key-change-in-production\",\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      const user = await storage.getUserByUsername(username);\n      if (!user || !(await comparePasswords(password, user.password))) {\n        return done(null, false);\n      } else {\n        return done(null, user);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      if (user) {\n        done(null, user);\n      } else {\n        // User not found in storage - this could be an Azure AD user\n        // Let the ensureUserExists middleware handle user creation\n        done(null, false);\n      }\n    } catch (error) {\n      console.error(\"Error deserializing user:\", error);\n      done(null, false);\n    }\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const existingUser = await storage.getUserByUsername(req.body.username);\n      if (existingUser) {\n        return res.status(400).send(\"Username already exists\");\n      }\n\n      // Validate and sanitize registration data, force role to employee\n      const validatedData = insertUserSchema.parse({\n        ...req.body,\n        role: \"employee\" // Always set role to employee, ignore client input\n      });\n\n      if (!validatedData.password) {\n        return res.status(400).send(\"Password is required\");\n      }\n\n      const user = await storage.createUser({\n        ...validatedData,\n        password: await hashPassword(validatedData.password),\n      });\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json(sanitizeUser(user));\n      });\n    } catch (error) {\n      res.status(500).send(\"Registration failed\");\n    }\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.status(200).json(sanitizeUser(req.user!));\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(sanitizeUser(req.user!));\n  });\n}","size_bytes":3778},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}","size_bytes":2831},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Route path={path} component={Component} />;\n}","size_bytes":705},"client/src/pages/auth-page.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Clock, Users, TrendingUp, AlertCircle } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [, navigate] = useLocation();\n  const [loginForm, setLoginForm] = useState({ username: \"\", password: \"\" });\n  const [registerForm, setRegisterForm] = useState({\n    username: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    employeeId: \"\",\n    designation: \"\",\n    department: \"\"\n  });\n\n  // Redirect if already logged in (using useEffect to avoid React warning)\n  useEffect(() => {\n    if (user) {\n      // Redirect based on user role\n      if (user.role === \"manager\") {\n        navigate(\"/manager\");\n      } else if (user.role === \"hr\") {\n        navigate(\"/hr\");\n      } else {\n        navigate(\"/\");\n      }\n    }\n  }, [user, navigate]);\n\n  if (user) {\n    return null; // Show nothing while redirecting\n  }\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      const user = await loginMutation.mutateAsync(loginForm);\n      // Redirect based on user role\n      if (user.role === \"manager\") {\n        navigate(\"/manager\");\n      } else if (user.role === \"hr\") {\n        navigate(\"/hr\");\n      } else {\n        navigate(\"/\");\n      }\n    } catch (error) {\n      // Error handled by the mutation's onError\n    }\n  };\n\n  const handleRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      const user = await registerMutation.mutateAsync(registerForm);\n      // Redirect based on user role (though registration always creates employees)\n      if (user.role === \"manager\") {\n        navigate(\"/manager\");\n      } else if (user.role === \"hr\") {\n        navigate(\"/hr\");\n      } else {\n        navigate(\"/\");\n      }\n    } catch (error) {\n      // Error handled by the mutation's onError\n    }\n  };\n\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-6xl grid grid-cols-1 lg:grid-cols-2 gap-8 items-center\">\n        {/* Hero Section */}\n        <div className=\"space-y-6 text-center lg:text-left\">\n          <div className=\"space-y-4\">\n            <h1 className=\"text-4xl lg:text-6xl font-bold text-gray-900 dark:text-white\">\n              Work Hours\n              <span className=\"block text-blue-600 dark:text-blue-400\">Tracker</span>\n            </h1>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300 max-w-md mx-auto lg:mx-0\">\n              Track your daily work hours efficiently and let HR & managers monitor team productivity.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg p-4 shadow-sm\">\n              <div className=\"flex items-center space-x-3\">\n                <Clock className=\"w-8 h-8 text-blue-600\" />\n                <div>\n                  <p className=\"font-semibold text-gray-900 dark:text-white\">Time Tracking</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Log daily hours</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg p-4 shadow-sm\">\n              <div className=\"flex items-center space-x-3\">\n                <Users className=\"w-8 h-8 text-green-600\" />\n                <div>\n                  <p className=\"font-semibold text-gray-900 dark:text-white\">Team Management</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">HR & Manager tools</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg p-4 shadow-sm\">\n              <div className=\"flex items-center space-x-3\">\n                <TrendingUp className=\"w-8 h-8 text-purple-600\" />\n                <div>\n                  <p className=\"font-semibold text-gray-900 dark:text-white\">Analytics</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Insights & reports</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Microsoft 365 Login Section */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Microsoft 365 Login</h3>\n            <Button\n              onClick={() => window.location.href = \"/api/auth/azure\"}\n              className=\"w-full mb-4 bg-blue-600 hover:bg-blue-700\"\n              data-testid=\"microsoft-365-login\"\n            >\n              Sign in with Microsoft 365\n            </Button>\n          </div>\n\n\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5342},"client/src/components/user-management-admin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus, Edit, Trash2, Eye, EyeOff } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\n\nimport type { User } from \"@shared/schema\";\n\n// Form schema for user creation/editing\nconst userFormSchema = z.object({\n  employeeId: z.string().min(1, \"Employee ID is required\"),\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\").optional(),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  department: z.string().min(1, \"Department is required\"),\n  designation: z.string().min(1, \"Designation is required\"),\n  role: z.enum([\"employee\", \"hr\", \"manager\"], {\n    required_error: \"Please select a role\",\n  }),\n});\n\ntype UserFormData = z.infer<typeof userFormSchema>;\n\ninterface UserManagementAdminProps {}\n\nexport default function UserManagementAdmin({}: UserManagementAdminProps) {\n  const { toast } = useToast();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n  const [deletingUser, setDeletingUser] = useState<User | null>(null);\n  const [showPassword, setShowPassword] = useState(false);\n\n  const { data: users = [], isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (userData: UserFormData) => {\n      const res = await apiRequest(\"POST\", \"/api/users\", userData);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setIsCreateModalOpen(false);\n      toast({\n        title: \"Success\",\n        description: \"User created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ id, userData }: { id: string; userData: Partial<UserFormData> }) => {\n      const res = await apiRequest(\"PUT\", `/api/users/${id}`, userData);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setEditingUser(null);\n      toast({\n        title: \"Success\",\n        description: \"User updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const res = await apiRequest(\"DELETE\", `/api/users/${userId}`);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setDeletingUser(null);\n      toast({\n        title: \"Success\",\n        description: \"User deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createForm = useForm<UserFormData>({\n    resolver: zodResolver(userFormSchema),\n    defaultValues: {\n      employeeId: \"\",\n      username: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      department: \"\",\n      designation: \"\",\n      role: \"employee\",\n    },\n  });\n\n  const editForm = useForm<UserFormData>({\n    resolver: zodResolver(userFormSchema.omit({ password: true })),\n  });\n\n  const handleCreateUser = (data: UserFormData) => {\n    createUserMutation.mutate(data);\n  };\n\n  const handleEditUser = (data: UserFormData) => {\n    if (editingUser) {\n      updateUserMutation.mutate({ id: editingUser.id, userData: data });\n    }\n  };\n\n  const handleDeleteUser = () => {\n    if (deletingUser) {\n      deleteUserMutation.mutate(deletingUser.id);\n    }\n  };\n\n  const openEditModal = (user: User) => {\n    setEditingUser(user);\n    editForm.reset({\n      employeeId: user.employeeId,\n      username: user.username,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      email: user.email,\n      department: user.department,\n      designation: user.designation,\n      role: user.role as \"employee\" | \"hr\" | \"manager\",\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>User Management</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-4\">\n            {Array.from({ length: 5 }).map((_, i) => (\n              <div key={i} className=\"h-12 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card data-testid=\"user-management-admin\">\n      <CardHeader className=\"flex flex-row items-center justify-between\">\n        <CardTitle>User Management</CardTitle>\n        <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-user\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add User\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Create New User</DialogTitle>\n            </DialogHeader>\n            <Form {...createForm}>\n              <form onSubmit={createForm.handleSubmit(handleCreateUser)} className=\"space-y-4\">\n                <FormField\n                  control={createForm.control}\n                  name=\"employeeId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Employee ID</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-employee-id\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createForm.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-username\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createForm.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input \n                            {...field} \n                            type={showPassword ? \"text\" : \"password\"}\n                            data-testid=\"input-password\" \n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowPassword(!showPassword)}\n                          >\n                            {showPassword ? (\n                              <EyeOff className=\"h-4 w-4\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={createForm.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-first-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={createForm.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-last-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <FormField\n                  control={createForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"email\" data-testid=\"input-email\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createForm.control}\n                  name=\"department\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Department</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-department\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createForm.control}\n                  name=\"designation\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Designation</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-designation\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createForm.control}\n                  name=\"role\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Role</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-role\">\n                            <SelectValue placeholder=\"Select a role\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"employee\">Employee</SelectItem>\n                          <SelectItem value=\"hr\">HR</SelectItem>\n                          <SelectItem value=\"manager\">Manager</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end space-x-2\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCreateModalOpen(false)}\n                    data-testid=\"button-cancel-create\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createUserMutation.isPending}\n                    data-testid=\"button-save-user\"\n                  >\n                    {createUserMutation.isPending ? \"Creating...\" : \"Create User\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </CardHeader>\n      <CardContent>\n        <div className=\"rounded-md border\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Employee ID</TableHead>\n                <TableHead>Name</TableHead>\n                <TableHead>Email</TableHead>\n                <TableHead>Department</TableHead>\n                <TableHead>Role</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {users.map((user) => (\n                <TableRow key={user.id} data-testid={`user-row-${user.employeeId}`}>\n                  <TableCell className=\"font-medium\">{user.employeeId}</TableCell>\n                  <TableCell>{user.firstName} {user.lastName}</TableCell>\n                  <TableCell>{user.email}</TableCell>\n                  <TableCell>{user.department}</TableCell>\n                  <TableCell>\n                    <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-secondary text-secondary-foreground\">\n                      {user.role.toUpperCase()}\n                    </span>\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <div className=\"flex justify-end space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => openEditModal(user)}\n                        data-testid={`button-edit-${user.employeeId}`}\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setDeletingUser(user)}\n                        data-testid={`button-delete-${user.employeeId}`}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n      </CardContent>\n\n      {/* Edit User Dialog */}\n      <Dialog open={!!editingUser} onOpenChange={() => setEditingUser(null)}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Edit User</DialogTitle>\n          </DialogHeader>\n          <Form {...editForm}>\n            <form onSubmit={editForm.handleSubmit(handleEditUser)} className=\"space-y-4\">\n              <FormField\n                control={editForm.control}\n                name=\"employeeId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Employee ID</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-edit-employee-id\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={editForm.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-edit-username\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>First Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-edit-first-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Last Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-edit-last-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              <FormField\n                control={editForm.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input {...field} type=\"email\" data-testid=\"input-edit-email\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={editForm.control}\n                name=\"department\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Department</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-edit-department\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={editForm.control}\n                name=\"designation\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Designation</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-edit-designation\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={editForm.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Role</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-edit-role\">\n                          <SelectValue placeholder=\"Select a role\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"employee\">Employee</SelectItem>\n                        <SelectItem value=\"hr\">HR</SelectItem>\n                        <SelectItem value=\"manager\">Manager</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setEditingUser(null)}\n                  data-testid=\"button-cancel-edit\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={updateUserMutation.isPending}\n                  data-testid=\"button-save-edit\"\n                >\n                  {updateUserMutation.isPending ? \"Updating...\" : \"Update User\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete User Dialog */}\n      <AlertDialog open={!!deletingUser} onOpenChange={() => setDeletingUser(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action cannot be undone. This will permanently delete the user account for{\" \"}\n              <strong>{deletingUser?.firstName} {deletingUser?.lastName}</strong>.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction \n              onClick={handleDeleteUser}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              Delete User\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </Card>\n  );\n}","size_bytes":22243},"server/azure-auth.ts":{"content":"import { ConfidentialClientApplication, Configuration } from \"@azure/msal-node\";\nimport { Client } from \"@microsoft/microsoft-graph-client\";\nimport { Request, Response, NextFunction } from \"express\";\nimport { storage } from \"./storage\";\n\n// Azure AD configuration\nconst clientConfig: Configuration = {\n  auth: {\n    clientId: process.env.AZURE_CLIENT_ID!,\n    clientSecret: process.env.AZURE_CLIENT_SECRET!,\n    authority: `https://login.microsoftonline.com/${process.env.AZURE_TENANT_ID}`,\n  },\n  system: {\n    loggerOptions: {\n      loggerCallback: (level, message, containsPii) => {\n        if (!containsPii) {\n          console.log(message);\n        }\n      },\n      piiLoggingEnabled: false,\n      logLevel: 3, // Info level\n    }\n  }\n};\n\n// Create MSAL instance\nconst msalInstance = new ConfidentialClientApplication(clientConfig);\n\n// Microsoft Graph client helper\nfunction getGraphClient(accessToken: string): Client {\n  return Client.init({\n    authProvider: (done) => {\n      done(null, accessToken);\n    }\n  });\n}\n\n// Get authorization URL\nexport async function getAuthUrl(): Promise<string> {\n  // Force the Replit domain instead of using conditional logic\n  const redirectUri = `https://6d978bd1-e832-4475-97b6-aa4502283adc-00-2i3c5pgjoz51p.worf.replit.dev/api/auth/callback`;\n    \n  console.log('Debug - FORCED redirectUri:', redirectUri);\n    \n  const authCodeUrlRequest = {\n    scopes: [\"user.read\", \"openid\", \"profile\", \"email\"],\n    redirectUri,\n  };\n\n  const authUrl = await msalInstance.getAuthCodeUrl(authCodeUrlRequest);\n  console.log('Debug - Generated Auth URL:', authUrl);\n  return authUrl;\n}\n\n// Handle callback and get user info\nexport async function handleCallback(code: string) {\n  try {\n    // Force the same Replit domain for consistency\n    const redirectUri = `https://6d978bd1-e832-4475-97b6-aa4502283adc-00-2i3c5pgjoz51p.worf.replit.dev/api/auth/callback`;\n      \n    const tokenRequest = {\n      code,\n      scopes: [\"user.read\", \"openid\", \"profile\", \"email\"],\n      redirectUri,\n    };\n\n    const response = await msalInstance.acquireTokenByCode(tokenRequest);\n    \n    if (!response) {\n      throw new Error(\"Failed to acquire token\");\n    }\n\n    // Get user profile from Microsoft Graph\n    const graphClient = getGraphClient(response.accessToken);\n    const user = await graphClient.api('/me').get();\n\n    return {\n      accessToken: response.accessToken,\n      user: {\n        id: user.id,\n        email: user.userPrincipalName || user.mail,\n        firstName: user.givenName,\n        lastName: user.surname,\n        displayName: user.displayName,\n      }\n    };\n  } catch (error) {\n    console.error(\"Azure auth error:\", error);\n    throw error;\n  }\n}\n\n// Middleware to verify user exists in our system (simplified version)\nexport async function ensureUserExists(req: Request, res: Response, next: NextFunction) {\n  try {\n    if (!req.user?.id) {\n      return res.status(401).json({ message: \"No user found in session\" });\n    }\n\n    // User should already exist in our system since they logged in\n    // This middleware is just a safety check\n    const user = await storage.getUser(req.user.id);\n    \n    if (!user) {\n      return res.status(401).json({ message: \"User not found in system\" });\n    }\n\n    // Ensure req.user has the latest data from storage\n    req.user = user;\n    next();\n  } catch (error) {\n    console.error(\"User verification error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n}\n\n","size_bytes":3478},"client/src/components/add-user-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nimport type { User } from \"@shared/schema\";\n\nconst addUserSchema = z.object({\n  employeeId: z.string().min(1, \"Employee ID is required\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  designation: z.string().min(1, \"Designation is required\"),\n  department: z.string().min(1, \"Department is required\"),\n  role: z.enum([\"employee\", \"hr\", \"manager\"])\n});\n\ntype AddUserFormData = z.infer<typeof addUserSchema>;\n\ninterface AddUserFormProps {\n  editingUser?: User | null;\n  onSuccess?: () => void;\n}\n\nexport default function AddUserForm({ editingUser, onSuccess }: AddUserFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<AddUserFormData>({\n    resolver: zodResolver(addUserSchema),\n    defaultValues: {\n      employeeId: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      designation: \"\",\n      department: \"\",\n      role: \"employee\"\n    },\n  });\n\n  // Populate form when editing\n  useEffect(() => {\n    if (editingUser) {\n      form.reset({\n        employeeId: editingUser.employeeId,\n        firstName: editingUser.firstName,\n        lastName: editingUser.lastName,\n        email: editingUser.email,\n        designation: editingUser.designation,\n        department: editingUser.department,\n        role: editingUser.role as \"employee\" | \"hr\" | \"manager\"\n      });\n    }\n  }, [editingUser, form]);\n\n  const saveUserMutation = useMutation({\n    mutationFn: async (userData: AddUserFormData) => {\n      if (editingUser) {\n        // Update existing user\n        const response = await apiRequest(\"PUT\", `/api/users/${editingUser.id}`, userData);\n        return response.json();\n      } else {\n        // Create new user\n        const response = await apiRequest(\"POST\", \"/api/users\", userData);\n        return response.json();\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/manager-dashboard-stats\"] });\n      toast({\n        title: \"Success\",\n        description: editingUser ? \"User updated successfully\" : \"User created successfully\",\n      });\n      form.reset();\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || (editingUser ? \"Failed to update user\" : \"Failed to create user\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: AddUserFormData) => {\n    saveUserMutation.mutate(data);\n  };\n\n\n  return (\n    <Card data-testid=\"add-user-form\">\n      <CardHeader>\n        <CardTitle data-testid=\"text-add-user-title\">\n          {editingUser ? \"Edit User\" : \"Add New User\"}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"employeeId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Employee ID</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"e.g., EMP001\" \n                        data-testid=\"input-employee-id\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Role</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-role\">\n                          <SelectValue placeholder=\"Select role\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"employee\">Employee</SelectItem>\n                        <SelectItem value=\"hr\">HR</SelectItem>\n                        <SelectItem value=\"manager\">Manager</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"firstName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>First Name</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"First name\" \n                        data-testid=\"input-first-name\"\n                        {...field}\n                        onBlur={field.onBlur}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"lastName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Last Name</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Last name\" \n                        data-testid=\"input-last-name\"\n                        {...field}\n                        onBlur={field.onBlur}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"email\" \n                        placeholder=\"user@company.com\" \n                        data-testid=\"input-email\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"designation\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Designation</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Senior Developer\" \n                        data-testid=\"input-designation\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"department\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Department</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Software Development\" \n                        data-testid=\"input-department\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n            </div>\n\n            <div className=\"flex justify-end\">\n              <Button \n                type=\"submit\" \n                disabled={saveUserMutation.isPending}\n                data-testid=\"button-save-user\"\n              >\n                {saveUserMutation.isPending \n                  ? (editingUser ? \"Updating User...\" : \"Adding User...\")\n                  : (editingUser ? \"Update User\" : \"Add User\")\n                }\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8990},"client/src/components/user-management-with-form.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Plus, Edit, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport AddUserForm from \"@/components/add-user-form\";\n\nimport type { User } from \"@shared/schema\";\n\nexport default function UserManagementWithForm() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n\n  const { data: users = [], isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n    refetchIntervalInBackground: true,\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      await apiRequest(\"DELETE\", `/api/users/${userId}`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/manager-dashboard-stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"User deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteUser = (userId: string) => {\n    if (confirm(\"Are you sure you want to delete this user?\")) {\n      deleteUserMutation.mutate(userId);\n    }\n  };\n\n  // Show all users: employees, HR users, and managers\n  const employees = users.filter(user => user.role === \"employee\" || user.role === \"hr\" || user.role === \"manager\");\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"animate-pulse bg-card border border-border rounded-lg p-6 h-40\"></div>\n        <div className=\"animate-pulse bg-card border border-border rounded-lg p-6 h-60\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"user-management-with-form\">\n      {/* Add Employee Button */}\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold\" data-testid=\"text-user-management-title\">\n          Employee Management\n        </h2>\n        <Dialog open={showAddForm} onOpenChange={setShowAddForm}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-employee\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Add Employee\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Add Employee</DialogTitle>\n            </DialogHeader>\n            <div className=\"py-4\">\n              <AddUserForm onSuccess={() => setShowAddForm(false)} />\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Employee List Table */}\n      <Card data-testid=\"employee-list-card\">\n        <CardHeader>\n          <CardTitle data-testid=\"text-employee-list-title\">Employee List</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {employees.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"text-no-employees\">\n              No employees found. Add your first employee to get started.\n            </div>\n          ) : (\n            <Table data-testid=\"employee-table\" className=\"border border-gray-300 border-collapse bg-white [&_th]:border [&_td]:border [&_th]:border-gray-300 [&_td]:border-gray-300 [&_th]:bg-gray-50 [&_th]:text-gray-900 [&_th]:font-semibold [&_th]:px-3 [&_th]:py-2 [&_td]:px-3 [&_td]:py-2 [&_tr:nth-child(even)]:bg-gray-50/50 [&_tr:hover]:bg-blue-50\">\n              <TableHeader>\n                <TableRow>\n                  <TableHead data-testid=\"header-name\" className=\"text-left\">Name</TableHead>\n                  <TableHead data-testid=\"header-email\" className=\"text-left\">Email</TableHead>\n                  <TableHead data-testid=\"header-designation\" className=\"text-left\">Designation</TableHead>\n                  <TableHead data-testid=\"header-role\" className=\"text-center\">Role</TableHead>\n                  <TableHead data-testid=\"header-actions\" className=\"text-center\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {employees.map((employee) => (\n                  <TableRow key={employee.id} data-testid={`row-employee-${employee.id}`}>\n                    <TableCell data-testid={`cell-name-${employee.id}`} className=\"font-medium\">\n                      {employee.firstName} {employee.lastName}\n                    </TableCell>\n                    <TableCell data-testid={`cell-email-${employee.id}`}>\n                      {employee.email}\n                    </TableCell>\n                    <TableCell data-testid={`cell-designation-${employee.id}`}>\n                      {employee.designation}\n                    </TableCell>\n                    <TableCell data-testid={`cell-role-${employee.id}`} className=\"text-center\">\n                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                        employee.role === 'manager' ? 'bg-purple-100 text-purple-800' :\n                        employee.role === 'hr' ? 'bg-blue-100 text-blue-800' :\n                        'bg-green-100 text-green-800'\n                      }`}>\n                        {employee.role.toUpperCase()}\n                      </span>\n                    </TableCell>\n                    <TableCell className=\"text-center\">\n                      <div className=\"flex justify-center space-x-2\">\n                        <Dialog>\n                          <DialogTrigger asChild>\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => setEditingUser(employee)}\n                              data-testid={`button-edit-${employee.id}`}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent>\n                            <DialogHeader>\n                              <DialogTitle>Edit Employee</DialogTitle>\n                            </DialogHeader>\n                            <div className=\"py-4\">\n                              <AddUserForm \n                                editingUser={editingUser} \n                                onSuccess={() => {\n                                  setEditingUser(null);\n                                }}\n                              />\n                            </div>\n                          </DialogContent>\n                        </Dialog>\n                        \n                        <Button \n                          variant=\"destructive\" \n                          size=\"sm\"\n                          onClick={() => handleDeleteUser(employee.id)}\n                          disabled={deleteUserMutation.isPending}\n                          data-testid={`button-delete-${employee.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7958},"client/src/pages/manager-dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Users, CheckCircle, XCircle, Clock } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport StatsCard from \"@/components/stats-card\";\nimport SimpleWorkTable from \"@/components/simple-work-table\";\nimport UserManagement from \"@/components/user-management\";\nimport UserManagementWithForm from \"@/components/user-management-with-form\";\nimport WorkHourRequestManagement from \"@/components/work-hour-request-management\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nimport type { WorkEntryWithUser, User } from \"@shared/schema\";\n\ninterface ManagerDashboardStats {\n  totalEmployees: number;\n  submitted: number;\n  notSubmitted: number;\n  totalWorkHours: string;\n}\n\nexport default function ManagerDashboard() {\n  const { user } = useAuth();\n\n  const { data: stats, isLoading: statsLoading } = useQuery<ManagerDashboardStats>({\n    queryKey: [\"/api/manager-dashboard-stats\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n    refetchIntervalInBackground: true,\n  });\n\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n    refetchIntervalInBackground: true,\n  });\n\n  const { data: allWorkEntries = [], isLoading: entriesLoading } = useQuery<WorkEntryWithUser[]>({\n    queryKey: [\"/api/work-entries\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n    refetchIntervalInBackground: true,\n  });\n\n  if (statsLoading || entriesLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"animate-pulse\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n            {Array.from({ length: 4 }).map((_, i) => (\n              <div key={i} className=\"bg-card border border-border rounded-lg p-4 h-20\"></div>\n            ))}\n          </div>\n          <div className=\"bg-card border border-border rounded-lg p-6 h-96 mb-6\"></div>\n          <div className=\"bg-card border border-border rounded-lg p-6 h-96\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\" data-testid=\"manager-dashboard\">\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"text-dashboard-title\">\n            Manager Dashboard\n          </h1>\n          <div className=\"text-sm text-muted-foreground\">\n            Welcome back, {user?.firstName} {user?.lastName}\n          </div>\n        </div>\n\n        {/* Tabs for different views */}\n        <Tabs defaultValue=\"dashboard\" className=\"space-y-4\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"dashboard\" data-testid=\"tab-dashboard\">Dashboard</TabsTrigger>\n            <TabsTrigger value=\"requests\" data-testid=\"tab-requests\">Work Requests</TabsTrigger>\n            <TabsTrigger value=\"user-management\" data-testid=\"tab-user-management\">User Management</TabsTrigger>\n            <TabsTrigger value=\"employees\" data-testid=\"tab-employees\">Employee Management</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"dashboard\">\n            <div className=\"space-y-6\">\n              {/* Statistics Cards */}\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <StatsCard\n                  title=\"Total Employees\"\n                  value={stats?.totalEmployees?.toString() || \"0\"}\n                  icon={Users}\n                  testId=\"card-total-employees\"\n                />\n                <StatsCard\n                  title=\"Employees Submitted Today\"\n                  value={stats?.submitted?.toString() || \"0\"}\n                  icon={CheckCircle}\n                  testId=\"card-submitted\"\n                />\n                <StatsCard\n                  title=\"Not Submitted\"\n                  value={stats?.notSubmitted?.toString() || \"0\"}\n                  icon={XCircle}\n                  testId=\"card-not-submitted\"\n                />\n                <StatsCard\n                  title=\"Total Hours Today\"\n                  value={stats?.totalWorkHours || \"0\"}\n                  icon={Clock}\n                  testId=\"card-total-hours\"\n                />\n              </div>\n\n              {/* Recent Work Entries Preview */}\n              <SimpleWorkTable \n                workEntries={allWorkEntries.slice(0, 10)} \n                title=\"Recent Work Entries\"\n                showEmployeeInfo={true}\n              />\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"requests\">\n            <WorkHourRequestManagement />\n          </TabsContent>\n\n          <TabsContent value=\"user-management\">\n            <UserManagementWithForm />\n          </TabsContent>\n\n          <TabsContent value=\"employees\">\n            <UserManagement />\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":5008},"client/src/components/work-hour-request-form.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Calendar, Clock, Send, User } from \"lucide-react\";\nimport { format, subDays } from \"date-fns\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Calendar as CalendarComponent } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { WorkHourRequestWithUser } from \"@shared/schema\";\n\nconst requestSchema = z.object({\n  requestedDate: z.string().min(1, \"Date is required\"),\n  reason: z.string().min(10, \"Reason must be at least 10 characters\"),\n});\n\ntype RequestFormData = z.infer<typeof requestSchema>;\n\nexport default function WorkHourRequestForm() {\n  const [isOpen, setIsOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get my work hour requests\n  const { data: myRequests = [] } = useQuery<WorkHourRequestWithUser[]>({\n    queryKey: [\"/api/work-hour-requests/my\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/work-hour-requests/my\");\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch work hour requests\");\n      }\n      return response.json();\n    },\n    refetchInterval: 30000, // Refresh every 30 seconds\n    refetchIntervalInBackground: true,\n  });\n\n  const form = useForm<RequestFormData>({\n    resolver: zodResolver(requestSchema),\n    defaultValues: {\n      requestedDate: \"\",\n      reason: \"\",\n    },\n  });\n\n  const createRequestMutation = useMutation({\n    mutationFn: async (data: RequestFormData) => {\n      return await apiRequest(\"POST\", \"/api/work-hour-requests\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Request submitted\",\n        description: \"Your work hour request has been sent to your manager for approval.\",\n      });\n      form.reset();\n      setIsOpen(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/work-hour-requests/my\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RequestFormData) => {\n    createRequestMutation.mutate(data);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return \"text-yellow-600 bg-yellow-100\";\n      case \"approved\":\n        return \"text-green-600 bg-green-100\";\n      case \"rejected\":\n        return \"text-red-600 bg-red-100\";\n      default:\n        return \"text-gray-600 bg-gray-100\";\n    }\n  };\n\n  return (\n    <Card data-testid=\"work-hour-request-form\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold flex items-center gap-2\">\n            <Clock className=\"h-5 w-5\" />\n            Work Hour Requests\n          </CardTitle>\n          <Button\n            onClick={() => setIsOpen(true)}\n            className=\"bg-blue-600 hover:bg-blue-700\"\n            data-testid=\"button-new-request\"\n          >\n            <Send className=\"h-4 w-4 mr-2\" />\n            Request Late Entry\n          </Button>\n        </div>\n      </CardHeader>\n\n      <CardContent>\n        {/* Request Form Modal */}\n        {isOpen && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n            <div className=\"bg-white rounded-lg p-6 w-full max-w-md mx-4\">\n              <h3 className=\"text-lg font-semibold mb-4\">Request Work Hour Entry</h3>\n              \n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"requestedDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Date you missed</FormLabel>\n                        <Popover>\n                          <PopoverTrigger asChild>\n                            <FormControl>\n                              <Button\n                                variant=\"outline\"\n                                className=\"w-full justify-start text-left font-normal\"\n                                data-testid=\"input-requested-date\"\n                              >\n                                <Calendar className=\"mr-2 h-4 w-4\" />\n                                {field.value ? format(new Date(field.value), \"PPP\") : \"Select date\"}\n                              </Button>\n                            </FormControl>\n                          </PopoverTrigger>\n                          <PopoverContent className=\"w-auto p-0\">\n                            <CalendarComponent\n                              mode=\"single\"\n                              selected={field.value ? new Date(field.value) : undefined}\n                              onSelect={(date) => {\n                                if (date) {\n                                  field.onChange(format(date, \"yyyy-MM-dd\"));\n                                }\n                              }}\n                              disabled={(date) => {\n                                // Disable future dates and weekends\n                                const today = new Date();\n                                today.setHours(0, 0, 0, 0);\n                                if (date >= today) return true;\n                                \n                                const dayOfWeek = date.getDay();\n                                return dayOfWeek === 0 || dayOfWeek === 6;\n                              }}\n                              initialFocus\n                              data-testid=\"calendar-requested-date\"\n                            />\n                          </PopoverContent>\n                        </Popover>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"reason\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Reason for late entry</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Please explain why you need to add work hours for this date...\"\n                            {...field}\n                            data-testid=\"input-reason\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex gap-2 pt-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        setIsOpen(false);\n                        form.reset();\n                      }}\n                      className=\"flex-1\"\n                      data-testid=\"button-cancel\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={createRequestMutation.isPending}\n                      className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n                      data-testid=\"button-submit-request\"\n                    >\n                      {createRequestMutation.isPending ? \"Submitting...\" : \"Submit Request\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </div>\n          </div>\n        )}\n\n        {/* Request History */}\n        <div className=\"space-y-3\">\n          <h4 className=\"font-medium text-sm text-gray-600\">Recent Requests</h4>\n          \n          {myRequests.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              <Clock className=\"h-12 w-12 mx-auto mb-2 text-gray-300\" />\n              <p>No work hour requests yet</p>\n              <p className=\"text-sm\">Request permission to add missed work hours</p>\n            </div>\n          ) : (\n            <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n              {myRequests.map((request) => (\n                <div\n                  key={request.id}\n                  className=\"border rounded-lg p-3 text-sm\"\n                  data-testid={`request-${request.id}`}\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <Calendar className=\"h-4 w-4\" />\n                      <span className=\"font-medium\">\n                        {format(new Date(request.requestedDate), \"MMM dd, yyyy\")}\n                      </span>\n                    </div>\n                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(request.status)}`}>\n                      {request.status.charAt(0).toUpperCase() + request.status.slice(1)}\n                    </span>\n                  </div>\n                  \n                  <p className=\"text-gray-600 mb-2\">{request.reason}</p>\n                  \n                  {request.managerComments && (\n                    <div className=\"mt-2 p-2 bg-gray-50 rounded text-xs\">\n                      <p className=\"font-medium text-gray-700\">Manager's Comments:</p>\n                      <p className=\"text-gray-600\">{request.managerComments}</p>\n                    </div>\n                  )}\n                  \n                  <div className=\"flex items-center gap-4 text-xs text-gray-500 mt-2\">\n                    <span>Requested: {format(new Date(request.requestedAt), \"MMM dd, HH:mm\")}</span>\n                    {request.reviewedAt && (\n                      <span>Reviewed: {format(new Date(request.reviewedAt), \"MMM dd, HH:mm\")}</span>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":10655},"client/src/components/work-hour-request-management.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Calendar, Clock, CheckCircle, XCircle, User, MessageSquare } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { WorkHourRequestWithUser } from \"@shared/schema\";\n\ninterface ApprovalModalProps {\n  request: WorkHourRequestWithUser;\n  action: \"approve\" | \"reject\";\n  onClose: () => void;\n  onSubmit: (id: string, status: string, comments?: string) => void;\n  isPending: boolean;\n}\n\nfunction ApprovalModal({ request, action, onClose, onSubmit, isPending }: ApprovalModalProps) {\n  const [comments, setComments] = useState(\"\");\n\n  const handleSubmit = () => {\n    onSubmit(request.id, action === \"approve\" ? \"approved\" : \"rejected\", comments);\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg p-6 w-full max-w-md mx-4\">\n        <h3 className=\"text-lg font-semibold mb-4\">\n          {action === \"approve\" ? \"Approve\" : \"Reject\"} Request\n        </h3>\n        \n        <div className=\"space-y-4 mb-6\">\n          <div className=\"p-3 bg-gray-50 rounded-lg\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <User className=\"h-4 w-4\" />\n              <span className=\"font-medium\">{request.employee?.firstName} {request.employee?.lastName}</span>\n            </div>\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Calendar className=\"h-4 w-4\" />\n              <span>{format(new Date(request.requestedDate), \"MMMM dd, yyyy\")}</span>\n            </div>\n            <p className=\"text-sm text-gray-600\">{request.reason}</p>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium mb-2\">\n              Comments {action === \"reject\" ? \"(required)\" : \"(optional)\"}\n            </label>\n            <Textarea\n              value={comments}\n              onChange={(e) => setComments(e.target.value)}\n              placeholder={`Add your comments for ${action === \"approve\" ? \"approving\" : \"rejecting\"} this request...`}\n              rows={3}\n              data-testid=\"input-manager-comments\"\n            />\n          </div>\n        </div>\n\n        <div className=\"flex gap-2\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={onClose}\n            className=\"flex-1\"\n            data-testid=\"button-cancel-action\"\n          >\n            Cancel\n          </Button>\n          <Button\n            type=\"button\"\n            onClick={handleSubmit}\n            disabled={isPending || (action === \"reject\" && !comments.trim())}\n            className={`flex-1 ${\n              action === \"approve\" \n                ? \"bg-green-600 hover:bg-green-700\" \n                : \"bg-red-600 hover:bg-red-700\"\n            }`}\n            data-testid={`button-${action}-request`}\n          >\n            {isPending ? \"Processing...\" : (action === \"approve\" ? \"Approve\" : \"Reject\")}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function WorkHourRequestManagement() {\n  const [selectedRequest, setSelectedRequest] = useState<WorkHourRequestWithUser | null>(null);\n  const [actionType, setActionType] = useState<\"approve\" | \"reject\" | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get all work hour requests for this manager\n  const { data: requests = [], isLoading } = useQuery<WorkHourRequestWithUser[]>({\n    queryKey: [\"/api/work-hour-requests\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n    refetchIntervalInBackground: true,\n  });\n\n  const updateRequestMutation = useMutation({\n    mutationFn: async ({ id, status, comments }: { id: string; status: string; comments?: string }) => {\n      return await apiRequest(\"PUT\", `/api/work-hour-requests/${id}`, {\n        status,\n        managerComments: comments || undefined,\n      });\n    },\n    onSuccess: (_, variables) => {\n      toast({\n        title: `Request ${variables.status}`,\n        description: `The work hour request has been ${variables.status}.`,\n      });\n      setSelectedRequest(null);\n      setActionType(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/work-hour-requests\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAction = (request: WorkHourRequestWithUser, action: \"approve\" | \"reject\") => {\n    setSelectedRequest(request);\n    setActionType(action);\n  };\n\n  const handleSubmit = (id: string, status: string, comments?: string) => {\n    updateRequestMutation.mutate({ id, status, comments });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"approved\":\n        return \"bg-green-100 text-green-800\";\n      case \"rejected\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const pendingRequests = requests.filter(r => r.status === \"pending\");\n  const reviewedRequests = requests.filter(r => r.status !== \"pending\");\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"animate-pulse\">\n          <div className=\"bg-card border border-border rounded-lg p-6 h-64\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"work-hour-request-management\">\n      {/* Pending Requests */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Clock className=\"h-5 w-5\" />\n            Pending Work Hour Requests\n            {pendingRequests.length > 0 && (\n              <Badge variant=\"secondary\" className=\"ml-2\">\n                {pendingRequests.length}\n              </Badge>\n            )}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {pendingRequests.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              <Clock className=\"h-12 w-12 mx-auto mb-2 text-gray-300\" />\n              <p>No pending requests</p>\n              <p className=\"text-sm\">All work hour requests have been reviewed</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {pendingRequests.map((request) => (\n                <div\n                  key={request.id}\n                  className=\"border rounded-lg p-4 bg-yellow-50 border-yellow-200\"\n                  data-testid={`pending-request-${request.id}`}\n                >\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"flex items-center gap-2\">\n                          <User className=\"h-4 w-4\" />\n                          <span className=\"font-medium\">\n                            {request.employee?.firstName} {request.employee?.lastName}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Calendar className=\"h-4 w-4\" />\n                          <span className=\"text-sm\">\n                            {format(new Date(request.requestedDate), \"MMM dd, yyyy\")}\n                          </span>\n                        </div>\n                        <Badge className={getStatusColor(request.status)}>\n                          {request.status.charAt(0).toUpperCase() + request.status.slice(1)}\n                        </Badge>\n                      </div>\n                      \n                      <p className=\"text-gray-700\">{request.reason}</p>\n                      \n                      <div className=\"text-xs text-gray-500\">\n                        Requested: {format(new Date(request.requestedAt), \"MMM dd, HH:mm\")}\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex gap-2 ml-4\">\n                      <Button\n                        size=\"sm\"\n                        onClick={() => handleAction(request, \"approve\")}\n                        className=\"bg-green-600 hover:bg-green-700\"\n                        data-testid={`button-approve-${request.id}`}\n                      >\n                        <CheckCircle className=\"h-4 w-4 mr-1\" />\n                        Approve\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleAction(request, \"reject\")}\n                        className=\"border-red-200 text-red-600 hover:bg-red-50\"\n                        data-testid={`button-reject-${request.id}`}\n                      >\n                        <XCircle className=\"h-4 w-4 mr-1\" />\n                        Reject\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Reviewed Requests */}\n      {reviewedRequests.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <MessageSquare className=\"h-5 w-5\" />\n              Recently Reviewed Requests\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n              {reviewedRequests.slice(0, 10).map((request) => (\n                <div\n                  key={request.id}\n                  className=\"border rounded-lg p-3 text-sm\"\n                  data-testid={`reviewed-request-${request.id}`}\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <User className=\"h-4 w-4\" />\n                      <span className=\"font-medium\">\n                        {request.employee?.firstName} {request.employee?.lastName}\n                      </span>\n                      <span className=\"text-gray-500\">•</span>\n                      <Calendar className=\"h-4 w-4\" />\n                      <span>{format(new Date(request.requestedDate), \"MMM dd\")}</span>\n                    </div>\n                    <Badge className={getStatusColor(request.status)}>\n                      {request.status.charAt(0).toUpperCase() + request.status.slice(1)}\n                    </Badge>\n                  </div>\n                  \n                  {request.managerComments && (\n                    <div className=\"mt-2 p-2 bg-gray-50 rounded text-xs\">\n                      <p className=\"font-medium text-gray-700\">Your Comments:</p>\n                      <p className=\"text-gray-600\">{request.managerComments}</p>\n                    </div>\n                  )}\n                  \n                  <div className=\"text-xs text-gray-500 mt-2\">\n                    Reviewed: {request.reviewedAt ? format(new Date(request.reviewedAt), \"MMM dd, HH:mm\") : \"N/A\"}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Approval Modal */}\n      {selectedRequest && actionType && (\n        <ApprovalModal\n          request={selectedRequest}\n          action={actionType}\n          onClose={() => {\n            setSelectedRequest(null);\n            setActionType(null);\n          }}\n          onSubmit={handleSubmit}\n          isPending={updateRequestMutation.isPending}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":12130}},"version":1}